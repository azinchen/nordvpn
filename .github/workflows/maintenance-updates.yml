name: Maintenance - Automated Updates

permissions:
  contents: write
  pull-requests: write

on:
  schedule:
    # Run at 3 AM UTC daily to stagger the updates
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - readme
          - configs
          - packages
          - apk

jobs:
  update-readme-files:
    name: 📄 Update README Files
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'readme' || github.event.inputs.update_type == '' }}
    strategy:
      matrix:
        file: 
          - name: "CITIES"
            url: "https://api.nordvpn.com/v1/servers/countries"
            jq_filter: '.[] | . as $parent | .cities[] | [$parent.name, $parent.code, $parent.id, .name, .id] | "\(.[0]) | \(.[1]) | \(.[2]) | \(.[3]) | \(.[4])"'
            header: "Country | Code | ID | City | ID"
          - name: "COUNTRIES"
            url: "https://api.nordvpn.com/v1/servers/countries"
            jq_filter: '.[] | [.name, .code, .id] | "\(.[0]) | \(.[1]) | \(.[2])"'
            header: "Country | Code | ID"
          - name: "TECHNOLOGIES"
            url: "https://api.nordvpn.com/v1/technologies"
            jq_filter: '.[] | [.name, .identifier, .id] | "\(.[0]) | \(.[1]) | \(.[2])"'
            header: "Technology | Identifier | ID"
          - name: "GROUPS"
            url: "https://api.nordvpn.com/v1/servers/groups"
            jq_filter: '.[] | [.title, .identifier, .id] | "\(.[0]) | \(.[1]) | \(.[2])"'
            header: "Group | Identifier | ID"
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Update ${{ matrix.file.name }}.md
        id: update-file
        shell: bash
        run: |
          {
            echo "# List of ${{ matrix.file.name }} with NordVPN servers"
            echo ""
            echo "${{ matrix.file.header }}"
            echo "$(echo "${{ matrix.file.header }}" | sed 's/[^|]/-/g')"
            curl -s "${{ matrix.file.url }}" | jq -r '${{ matrix.file.jq_filter }}'
          } > ${{ matrix.file.name }}.md

          DATE=$(date +%y%m%d)
          echo "update_date=${DATE}" >> $GITHUB_ENV
          echo "file_name=${{ matrix.file.name }}" >> $GITHUB_ENV

      - name: Create Pull Request for ${{ matrix.file.name }}.md
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          branch: bot/update-${{ matrix.file.name }}-${{ env.update_date }}
          commit-message: "docs: update ${{ matrix.file.name }}.md (${{ env.update_date }})"
          delete-branch: true
          title: "📄 Update ${{ matrix.file.name }}.md - ${{ env.update_date }}"
          body: |
            ## 📄 Automated README Update
            
            **File**: `${{ matrix.file.name }}.md`
            **Date**: ${{ env.update_date }}
            **Source**: ${{ matrix.file.url }}
            
            This PR updates the ${{ matrix.file.name }}.md file with the latest data from NordVPN API.
            
            ---
            🤖 Auto-generated by [update-readme workflow](https://github.com/${{ github.repository }}/actions/workflows/maintenance-updates.yml)

  update-configs:
    name: ⚙️ Update Configuration Files
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'configs' || github.event.inputs.update_type == '' }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Update OpenVPN template
        id: update-ovpn
        shell: bash
        run: |
          # Download and extract OpenVPN configs
          wget -q https://downloads.nordcdn.com/configs/archives/servers/ovpn.zip -O /tmp/ovpn.zip
          unzip -q /tmp/ovpn.zip -d /tmp/ovpn

          # Use a random file as base template
          RANDOM_FILE=$(find /tmp/ovpn -type f | shuf -n 1)
          echo "📄 Using ${RANDOM_FILE} as base for template.ovpn"
          
          # Create template with placeholders
          cp "${RANDOM_FILE}" root/etc/nordvpn/template.ovpn
          sed -i '/proto /c\proto __PROTOCOL__' root/etc/nordvpn/template.ovpn
          sed -i '/remote /c\remote __IP__ __PORT__' root/etc/nordvpn/template.ovpn
          sed -i '/verify-x509-name /c\verify-x509-name CN=__X509_NAME__' root/etc/nordvpn/template.ovpn

          # Add custom scripts
          {
            echo "script-security 2"
            echo "up /etc/openvpn/up.sh"
            echo "down /etc/openvpn/down.sh"
          } >> root/etc/nordvpn/template.ovpn

          TEMPLATE_DATE=$(date +%y%m%d)
          echo "template_date=${TEMPLATE_DATE}" >> $GITHUB_ENV

      - name: Create Pull Request for OpenVPN template
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          branch: bot/update-ovpn-template-${{ env.template_date }}
          commit-message: "config: update OpenVPN template (${{ env.template_date }})"
          delete-branch: true
          title: "⚙️ Update OpenVPN template - ${{ env.template_date }}"
          body: |
            ## ⚙️ OpenVPN Template Update
            
            **Date**: ${{ env.template_date }}
            **File**: `root/etc/nordvpn/template.ovpn`
            
            Updated OpenVPN configuration template with latest settings from NordVPN.
            
            ### Changes:
            - Updated base configuration from NordVPN servers
            - Maintained placeholders for dynamic configuration
            - Preserved custom script hooks
            
            ---
            🤖 Auto-generated by [update-configs workflow](https://github.com/${{ github.repository }}/actions/workflows/maintenance-updates.yml)

  update-apk-packages:
    name: 📦 Update APK Packages
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'apk' || github.event.inputs.update_type == '' }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Update APK package versions
        id: update-apk
        run: |
          chmod +x ./scripts/update-apk-versions.sh
          ./scripts/update-apk-versions.sh Dockerfile

          UPDATE_DATE=$(date +%y%m%d)
          echo "update_date=${UPDATE_DATE}" >> $GITHUB_ENV
          echo "update_date=${UPDATE_DATE}" >> $GITHUB_OUTPUT

      - name: Create Pull Request for APK updates
        if: steps.update-apk.outputs.has_updates == 'true'
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          branch: bot/update-apk-packages-${{ env.update_date }}
          commit-message: "deps: update ${{ steps.update-apk.outputs.updated_count }} APK package(s) (${{ env.update_date }})"
          delete-branch: true
          title: "📦 Update APK packages - ${{ env.update_date }}"
          body: |
            ## 📦 APK Package Updates
            
            **Date**: ${{ env.update_date }}
            **Packages updated**: ${{ steps.update-apk.outputs.updated_count }} of ${{ steps.update-apk.outputs.total_packages }} checked
            
            ### Updated Packages:
            ${{ steps.update-apk.outputs.packages_updated }}
            
            ### Changes:
            - Updated Alpine Linux package versions in Dockerfile
            - Maintained compatibility with existing configurations
            
            ---
            🤖 Auto-generated by [update-apk workflow](https://github.com/${{ github.repository }}/actions/workflows/maintenance-updates.yml)

  update-github-packages:
    name: 📋 Update GitHub Package Versions
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'packages' || github.event.inputs.update_type == '' }}
    strategy:
      matrix:
        repository: ["just-containers/s6-overlay"]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Get latest version for ${{ matrix.repository }}
        id: get-version
        shell: bash
        run: |
          TAG=$(curl -Ls https://api.github.com/repos/${{ matrix.repository }}/tags | jq -r "first.name")
          PACKAGE_VERSION=${TAG:1}
          BRANCH_NAME="bot/update-$(echo '${{ matrix.repository }}' | sed 's/\//-/g')-${PACKAGE_VERSION}"

          echo "package_version=${PACKAGE_VERSION}" >> $GITHUB_ENV
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_ENV
          echo "repo_name=$(echo '${{ matrix.repository }}' | cut -d'/' -f2)" >> $GITHUB_ENV

      - name: Update Dockerfile with new version
        shell: bash
        run: |
          ESCAPED_SEARCH=$(printf '%s\n' "${{ matrix.repository }}" | sed -e 's/[\/&]/\\&/g')
          sed -i "/.*${ESCAPED_SEARCH}.*/{n;s/.*/ENV PACKAGEVERSION=\"${{ env.package_version }}\"/}" Dockerfile

      - name: Create Pull Request for ${{ matrix.repository }}
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          branch: ${{ env.branch_name }}
          commit-message: "deps: bump ${{ env.repo_name }} to v${{ env.package_version }}"
          delete-branch: true
          title: "📋 Bump ${{ env.repo_name }} to v${{ env.package_version }}"
          body: |
            ## 📋 Package Version Update
            
            **Repository**: [${{ matrix.repository }}](https://github.com/${{ matrix.repository }})
            **Version**: `${{ env.package_version }}`
            
            This PR updates the package version in the Dockerfile.
            
            ### Changes:
            - Updated `PACKAGEVERSION` environment variable
            - Bumped from previous version to `${{ env.package_version }}`
            
            ---
            🤖 Auto-generated by [update-packages workflow](https://github.com/${{ github.repository }}/actions/workflows/maintenance-updates.yml)
