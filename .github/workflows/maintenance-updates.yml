name: Maintenance - Automated Updates

permissions:
  contents: write
  pull-requests: write

on:
  schedule:
    # Run at 3 AM UTC daily to stagger the updates
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - readme
          - configs
          - countries-json
          - groups-json
          - technologies-json
          - openvpn-template
          - nordvpn-api-ips
          - packages
          - apk
      force_update:
        description: 'Force update MD files even if content unchanged'
        required: false
        default: false
        type: boolean

jobs:
  update-readme-files:
    name: 📄 Update README Files
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'readme' || github.event.inputs.update_type == '' }}
    strategy:
      matrix:
        file: 
          - name: "CITIES"
            url: "https://api.nordvpn.com/v1/servers/countries"
            jq_filter: '.[] | . as $parent | .cities[] | [$parent.name, $parent.code, $parent.id, $parent.serverCount, .name, .id, .serverCount] | "\(.[0]) | \(.[1]) | \(.[2]) | \(.[4]) | \(.[5]) | \(.[6])"'
            header: "Country | Code | ID | City | ID | Servers"
          - name: "COUNTRIES"
            url: "https://api.nordvpn.com/v1/servers/countries"
            jq_filter: '.[] | [.name, .code, .id, .serverCount] | "\(.[0]) | \(.[1]) | \(.[2]) | \(.[3])"'
            header: "Country | Code | ID | Servers"
          - name: "TECHNOLOGIES"
            url: "https://api.nordvpn.com/v1/technologies"
            jq_filter: '.[] | [.name, .identifier, .id] | "\(.[0]) | \(.[1]) | \(.[2])"'
            header: "Technology | Identifier | ID"
          - name: "GROUPS"
            url: "https://api.nordvpn.com/v1/servers/groups"
            jq_filter: '.[] | [.title, .identifier, .id] | "\(.[0]) | \(.[1]) | \(.[2])"'
            header: "Group | Identifier | ID"
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Update ${{ matrix.file.name }}.md
        id: update-file
        shell: bash
        run: |
          # Generate new content without timestamp
          NEW_CONTENT="# List of ${{ matrix.file.name }} with NordVPN servers
          
          ${{ matrix.file.header }}
          $(echo "${{ matrix.file.header }}" | sed 's/[^|]/-/g')
          $(curl -s "${{ matrix.file.url }}" | jq -r '${{ matrix.file.jq_filter }}')"
          
          # Check if file exists and extract existing content without timestamp
          if [ -f "${{ matrix.file.name }}.md" ]; then
            FIRST_LINE=$(head -1 "${{ matrix.file.name }}.md")
            if [[ $FIRST_LINE == "Last updated:"* ]]; then
              EXISTING_CONTENT=$(tail -n +3 "${{ matrix.file.name }}.md")
            else
              EXISTING_CONTENT=$(cat "${{ matrix.file.name }}.md")
            fi
          else
            EXISTING_CONTENT=""
          fi
          
          # Check force update or compare
          if [ "${{ github.event.inputs.force_update }}" == "true" ] || [ "$NEW_CONTENT" != "$EXISTING_CONTENT" ]; then
            echo "Last updated: $(date +%Y-%m-%d)" > "${{ matrix.file.name }}.md"
            echo "---" >> "${{ matrix.file.name }}.md"
            echo "$NEW_CONTENT" >> "${{ matrix.file.name }}.md"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
          
          DATE=$(date +%y%m%d)
          echo "update_date=${DATE}" >> $GITHUB_ENV
          echo "file_name=${{ matrix.file.name }}" >> $GITHUB_ENV

      - name: Create Pull Request for ${{ matrix.file.name }}.md
        if: steps.update-file.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          branch: bot/update-${{ matrix.file.name }}-md
          commit-message: "docs: update ${{ matrix.file.name }}.md (${{ env.update_date }})"
          delete-branch: true
          title: "📄 Update ${{ matrix.file.name }}.md - ${{ env.update_date }}"
          body: |
            ## 📄 Automated README Update
            
            **File**: `${{ matrix.file.name }}.md`
            **Date**: ${{ env.update_date }}
            **Source**: ${{ matrix.file.url }}
            
            This PR updates the ${{ matrix.file.name }}.md file with the latest data from NordVPN API.
            
            ---
            🤖 Auto-generated by [update-readme workflow](https://github.com/${{ github.repository }}/actions/workflows/maintenance-updates.yml)

  update-countries-json:
    name: 🌍 Update Countries JSON
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'configs' || github.event.inputs.update_type == 'countries-json' || github.event.inputs.update_type == '' }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Update countries.json
        id: update-countries
        shell: bash
        run: |
          echo "Fetching countries data from NordVPN API..."
          
          # Create directory if it doesn't exist
          mkdir -p root/usr/local/share/nordvpn/data
          
          # Download and process countries.json with beautiful formatting
          curl -s "https://api.nordvpn.com/v1/servers/countries" \
            | jq '.[] | del(.serverCount) | .cities = [.cities[]? | del(.serverCount, .hub_score)] | .' \
            > root/usr/local/share/nordvpn/data/countries.json

          UPDATE_DATE=$(date +%y%m%d)
          echo "update_date=${UPDATE_DATE}" >> $GITHUB_ENV

      - name: Create Pull Request for countries.json
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          branch: bot/update-countries-json
          commit-message: "config: update countries.json (${{ env.update_date }})"
          delete-branch: true
          title: "🌍 Update countries.json - ${{ env.update_date }}"
          body: |
            ## 🌍 Countries Configuration Update
            
            **File**: `root/usr/local/share/nordvpn/data/countries.json`
            **Date**: ${{ env.update_date }}
            **Source**: https://api.nordvpn.com/v1/servers/countries
            
            ### Changes:
            - Updated countries data from NordVPN API
            - Beautifully formatted JSON with proper indentation
            - Removed serverCount and hub_score fields (frequently changing metrics)
            - Optimized for both readability and runtime performance
            
            ---
            🤖 Auto-generated by [update-countries workflow](https://github.com/${{ github.repository }}/actions/workflows/maintenance-updates.yml)

  update-groups-json:
    name: 🏷️ Update Groups JSON
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'configs' || github.event.inputs.update_type == 'groups-json' || github.event.inputs.update_type == '' }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Update groups.json
        id: update-groups
        shell: bash
        run: |
          echo "Fetching groups data from NordVPN API..."
          
          # Create directory if it doesn't exist
          mkdir -p root/usr/local/share/nordvpn/data
          
          # Download and process groups.json with beautiful formatting
          curl -s "https://api.nordvpn.com/v1/servers/groups" \
            | jq '.[] | .' \
            > root/usr/local/share/nordvpn/data/groups.json

          UPDATE_DATE=$(date +%y%m%d)
          echo "update_date=${UPDATE_DATE}" >> $GITHUB_ENV

      - name: Create Pull Request for groups.json
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          branch: bot/update-groups-json
          commit-message: "config: update groups.json (${{ env.update_date }})"
          delete-branch: true
          title: "🏷️ Update groups.json - ${{ env.update_date }}"
          body: |
            ## 🏷️ Groups Configuration Update
            
            **File**: `root/usr/local/share/nordvpn/data/groups.json`
            **Date**: ${{ env.update_date }}
            **Source**: https://api.nordvpn.com/v1/servers/groups
            
            ### Changes:
            - Updated server groups data from NordVPN API
            - Beautifully formatted JSON with proper indentation
            - Optimized for both readability and runtime performance
            
            ---
            🤖 Auto-generated by [update-groups workflow](https://github.com/${{ github.repository }}/actions/workflows/maintenance-updates.yml)

  update-technologies-json:
    name: 🔧 Update Technologies JSON
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'configs' || github.event.inputs.update_type == 'technologies-json' || github.event.inputs.update_type == '' }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Update technologies.json
        id: update-technologies
        shell: bash
        run: |
          echo "Fetching technologies data from NordVPN API..."
          
          # Create directory if it doesn't exist
          mkdir -p root/usr/local/share/nordvpn/data
          
          # Download and process technologies.json with beautiful formatting
          curl -s "https://api.nordvpn.com/v1/technologies" \
            | jq '.[] | .' \
            > root/usr/local/share/nordvpn/data/technologies.json

          UPDATE_DATE=$(date +%y%m%d)
          echo "update_date=${UPDATE_DATE}" >> $GITHUB_ENV

      - name: Create Pull Request for technologies.json
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          branch: bot/update-technologies-json
          commit-message: "config: update technologies.json (${{ env.update_date }})"
          delete-branch: true
          title: "🔧 Update technologies.json - ${{ env.update_date }}"
          body: |
            ## 🔧 Technologies Configuration Update
            
            **File**: `root/usr/local/share/nordvpn/data/technologies.json`
            **Date**: ${{ env.update_date }}
            **Source**: https://api.nordvpn.com/v1/technologies
            
            ### Changes:
            - Updated VPN technologies data from NordVPN API
            - Beautifully formatted JSON with proper indentation
            - Optimized for both readability and runtime performance
            
            ---
            🤖 Auto-generated by [update-technologies workflow](https://github.com/${{ github.repository }}/actions/workflows/maintenance-updates.yml)

  update-openvpn-template:
    name: 📝 Update OpenVPN Template
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'configs' || github.event.inputs.update_type == 'openvpn-template' || github.event.inputs.update_type == '' }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Update template.ovpn
        id: update-template
        shell: bash
        run: |
          echo "Downloading and updating OpenVPN template..."
          
          # Create directory if it doesn't exist
          mkdir -p root/usr/local/share/nordvpn/data
          
          # Download and extract OpenVPN configs
          wget -q https://downloads.nordcdn.com/configs/archives/servers/ovpn.zip -O /tmp/ovpn.zip
          unzip -q /tmp/ovpn.zip -d /tmp/ovpn

          # Use a random file as base template
          RANDOM_FILE=$(find /tmp/ovpn -type f | shuf -n 1)
          echo "📄 Using ${RANDOM_FILE} as base for template.ovpn"
          
          # Create template with placeholders
          cp "${RANDOM_FILE}" root/usr/local/share/nordvpn/data/template.ovpn
          sed -i '/proto /c\proto __PROTOCOL__' root/usr/local/share/nordvpn/data/template.ovpn
          sed -i '/remote /c\remote __IP__ __PORT__' root/usr/local/share/nordvpn/data/template.ovpn
          sed -i '/verify-x509-name /c\verify-x509-name CN=__X509_NAME__' root/usr/local/share/nordvpn/data/template.ovpn

          # Add custom scripts
          {
            echo "script-security 2"
            echo "up /etc/openvpn/up.sh"
            echo "down /etc/openvpn/down.sh"
          } >> root/usr/local/share/nordvpn/data/template.ovpn

          UPDATE_DATE=$(date +%y%m%d)
          echo "update_date=${UPDATE_DATE}" >> $GITHUB_ENV

      - name: Create Pull Request for template.ovpn
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          branch: bot/update-openvpn-template
          commit-message: "config: update OpenVPN template (${{ env.update_date }})"
          delete-branch: true
          title: "📝 Update OpenVPN template - ${{ env.update_date }}"
          body: |
            ## 📝 OpenVPN Template Update
            
            **File**: `root/usr/local/share/nordvpn/data/template.ovpn`
            **Date**: ${{ env.update_date }}
            **Source**: https://downloads.nordcdn.com/configs/archives/servers/ovpn.zip
            
            ### Changes:
            - Updated base configuration from latest NordVPN servers
            - Maintained placeholders for dynamic configuration:
              - `__PROTOCOL__` for protocol selection
              - `__IP__` and `__PORT__` for server connection
              - `__X509_NAME__` for certificate verification
            - Preserved custom script hooks for up/down events
            
            ---
            🤖 Auto-generated by [update-openvpn-template workflow](https://github.com/${{ github.repository }}/actions/workflows/maintenance-updates.yml)

  update-nordvpn-api-ips:
    name: 🌍 Update NordVPN's API addresses
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'nordvpn-api-ips' || github.event.inputs.update_type == '' }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Update NordVPN's API addresses
        id: nordvpn-api-ips
        shell: bash
        run: |
          echo "Fetching NordVPN API addresses..."

          IPS=$(dig +short A api.nordvpn.com | sort -V | tr '\n' ';' | sed 's/;$//')
          echo "Found IPs: $IPS"
          
          # Escape special characters for sed
          IPS_ESCAPED=$(echo "$IPS" | sed 's/[&/\]/\\&/g')
          
          # Update the backend-functions file with actual IP addresses
          sed -i "s|nordvpnapi_ip=\"\${NORDVPNAPI_IP:-[^\"]*}\"|nordvpnapi_ip=\"\${NORDVPNAPI_IP:-${IPS_ESCAPED}}\"|" root/usr/local/bin/backend-functions

          UPDATE_DATE=$(date +%y%m%d)
          echo "update_date=${UPDATE_DATE}" >> $GITHUB_ENV

      - name: Create Pull Request for NordVPN's API addresses
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          branch: bot/update-nordvpn-api-ips
          commit-message: "config: update `NORDVPNAPI_IP` in backend-functions (${{ env.update_date }})"
          delete-branch: true
          title: "🌍 Update `NORDVPNAPI_IP` in backend-functions - ${{ env.update_date }}"
          body: |
            ## 🌍 NORDVPNAPI_IP Update
            
            **File**: `root/usr/local/bin/backend-functions`
            **Date**: ${{ env.update_date }}
            **Source**: `dig +short A api.nordvpn.com | tr '\n' ';' | sed 's/;$//'`
            
            ### Changes:
            - Updated `api.nordvpn.com` addresses in `NORDVPNAPI_IP`
            - Beautifully formatted Dockerfile with proper indentation
            
            ---
            🤖 Auto-generated by [update-countries workflow](https://github.com/${{ github.repository }}/actions/workflows/maintenance-updates.yml)

  update-apk-packages:
    name: 📦 Update APK Packages
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'apk' || github.event.inputs.update_type == '' }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Update APK package versions
        id: update-apk
        run: |
          chmod +x ./scripts/update-apk-versions.sh
          ./scripts/update-apk-versions.sh Dockerfile

          UPDATE_DATE=$(date +%y%m%d)
          echo "update_date=${UPDATE_DATE}" >> $GITHUB_ENV
          echo "update_date=${UPDATE_DATE}" >> $GITHUB_OUTPUT

      - name: Create Pull Request for APK updates
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          branch: bot/update-apk-packages
          commit-message: "deps: update ${{ steps.update-apk.outputs.updated_count }} APK package(s) (${{ env.update_date }})"
          delete-branch: true
          title: "📦 Update APK packages - ${{ env.update_date }}"
          body: |
            ## 📦 APK Package Updates
            
            **Date**: ${{ env.update_date }}
            **Packages updated**: ${{ steps.update-apk.outputs.updated_count }} of ${{ steps.update-apk.outputs.total_packages }} checked
            
            ### Updated Packages:
            ${{ steps.update-apk.outputs.packages_updated }}
            
            ### Changes:
            - Updated Alpine Linux package versions in Dockerfile
            - Maintained compatibility with existing configurations
            
            ---
            🤖 Auto-generated by [update-apk workflow](https://github.com/${{ github.repository }}/actions/workflows/maintenance-updates.yml)

  update-github-packages:
    name: 📋 Update GitHub Package Versions
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'packages' || github.event.inputs.update_type == '' }}
    strategy:
      matrix:
        repository: ["just-containers/s6-overlay"]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Get latest version for ${{ matrix.repository }}
        id: get-version
        shell: bash
        run: |
          TAG=$(curl -Ls https://api.github.com/repos/${{ matrix.repository }}/tags | jq -r "first.name")
          PACKAGE_VERSION=${TAG:1}
          BRANCH_NAME="bot/update-$(echo '${{ matrix.repository }}' | sed 's/\//-/g')-${PACKAGE_VERSION}"

          echo "package_version=${PACKAGE_VERSION}" >> $GITHUB_ENV
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_ENV
          echo "repo_name=$(echo '${{ matrix.repository }}' | cut -d'/' -f2)" >> $GITHUB_ENV

      - name: Update Dockerfile with new version
        shell: bash
        run: |
          ESCAPED_SEARCH=$(printf '%s\n' "${{ matrix.repository }}" | sed -e 's/[\/&]/\\&/g')
          sed -i "/.*${ESCAPED_SEARCH}.*/{n;s/.*/ENV PACKAGEVERSION=\"${{ env.package_version }}\"/}" Dockerfile

      - name: Create Pull Request for ${{ matrix.repository }}
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          branch: bot/${{ env.branch_name }}
          commit-message: "deps: bump ${{ env.repo_name }} to v${{ env.package_version }}"
          delete-branch: true
          title: "📋 Bump ${{ env.repo_name }} to v${{ env.package_version }}"
          body: |
            ## 📋 Package Version Update
            
            **Repository**: [${{ matrix.repository }}](https://github.com/${{ matrix.repository }})
            **Version**: `${{ env.package_version }}`
            
            This PR updates the package version in the Dockerfile.
            
            ### Changes:
            - Updated `PACKAGEVERSION` environment variable
            - Bumped from previous version to `${{ env.package_version }}`
            
            ---
            🤖 Auto-generated by [update-packages workflow](https://github.com/${{ github.repository }}/actions/workflows/maintenance-updates.yml)
