name: Security Analysis

permissions:
  contents: read
  security-events: write
  issues: write

on:
  schedule:
    - cron: 0 4 * * *
  workflow_dispatch:

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3.29.1
        with:
          languages: javascript
          queries: security-extended,security-and-quality

      - name: Perform CodeQL Analysis
        id: codeql-analyze
        uses: github/codeql-action/analyze@v3.29.1
        continue-on-error: true
        with:
          category: "/language:javascript"

      - name: Run Super-Linter
        id: super-linter
        uses: super-linter/super-linter@v7.4.0
        continue-on-error: true
        env:
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_DOCKERFILE_HADOLINT: true
          VALIDATE_BASH: true
          VALIDATE_SHELL_SHFMT: true
          VALIDATE_MARKDOWN: true
          VALIDATE_JSON: true
          VALIDATE_YAML: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3.29.1
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-filesystem'

      - name: Run Trivy on Dockerfile
        id: trivy-config
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          scan-type: 'config'
          scan-ref: 'Dockerfile'
          format: 'table'

      - name: Create scan results archive
        if: always()
        run: |
          # Create directory for scan results
          mkdir -p scan-results
          
          # Copy all scan result files if they exist
          [ -f "trivy-results.sarif" ] && cp trivy-results.sarif scan-results/
          
          # Create text summary files for easier reading
          if [ -f "trivy-results.sarif" ]; then
            jq -r '.runs[0].results[] | 
              "TRIVY: \(.message.text // .ruleId) in \(.locations[0].physicalLocation.artifactLocation.uri // "unknown")"' \
              trivy-results.sarif > scan-results/trivy-summary.txt 2>/dev/null || \
              echo "No Trivy filesystem results" > scan-results/trivy-summary.txt
          else
            echo "No Trivy filesystem results" > scan-results/trivy-summary.txt
          fi
          
          # Create a summary file with scan information
          cat > scan-results/scan-summary.md << 'EOF'
          # Security Scan Results Summary
          EOF
          
          # Add dynamic content to summary
          cat >> scan-results/scan-summary.md << EOF
          
          **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Repository:** ${{ github.repository }}
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          **Run ID:** ${{ github.run_id }}
          
          ## Files Included
          EOF
          
          # List files in scan-results directory
          ls -la scan-results/ | grep -v "^total" | grep -v "^d" | \
            awk '{print "- " $9 " (" $5 " bytes)"}' >> scan-results/scan-summary.md
          
          # Add tools section
          cat >> scan-results/scan-summary.md << 'EOF'
          
          ## Tools Used
          - **Trivy**: Filesystem vulnerability scanning
          - **CodeQL**: Static security analysis
          - **Super-Linter**: Multi-language linting
          
          ## Quick Summary
          EOF
          
          # Add quick summary from text files
          cat scan-results/*-summary.txt 2>/dev/null | head -20 >> scan-results/scan-summary.md || \
            echo "No summary data available" >> scan-results/scan-summary.md
          
          # Add links section
          cat >> scan-results/scan-summary.md << EOF
          
          ## View Results
          - [Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [Security Tab](https://github.com/${{ github.repository }}/security/code-scanning)
          EOF
          
          # Create zip archive with current date
          ZIP_FILENAME="security-scan-results-$(date +%Y%m%d-%H%M%S).zip"
          zip -r "$ZIP_FILENAME" scan-results/

      - name: Upload scan results as artifact
        if: always()
        uses: actions/upload-artifact@v4.4.3
        with:
          name: security-scan-results
          path: security-scan-results-*.zip
          retention-days: 30
          compression-level: 0
          if-no-files-found: ignore

      - name: Create Super-Linter Issue
        if: always() && steps.super-linter.outcome == 'failure'
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const fs = require('fs');
            const currentDate = new Date().toISOString().split('T')[0];
            const title = 'üîç Linting Issues Found';
            
            // Artifacts are always available in GitHub Actions
            const hasArtifacts = true;
            
            const newBody = `
            ## Super-Linter Found Issues
            
            **Files with problems detected in:**
            - Shell scripts
            - Dockerfile
            - Markdown files
            - JSON/YAML files
            
            ### Fix Required
            [View detailed linting results](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            
            ${hasArtifacts ? `### üìé Scan Results
            Download the complete scan results from the [Artifacts section](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            
            Click "security-scan-results" in the Artifacts section to download the zip file containing:
            - SARIF files from all security scanners
            - Detailed scan summary
            - Raw scan outputs` : ''}
            
            **Priority:** Medium
            **Type:** Code Quality
            **Last Updated:** ${currentDate}
            **Run ID:** ${context.runId}
            `;
            
            // Get existing issues with the same title (without date)
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['linting', 'code-quality']
            });
            
            const existingIssue = existingIssues.data.find(issue => 
              issue.title.includes('Linting Issues Found')
            );
            
            if (existingIssue) {
              // Compare content (excluding dates and run IDs)
              const normalizeContent = (content) => {
                return content
                  .replace(/\*\*Last Updated:\*\* \d{4}-\d{2}-\d{2}/g, '')
                  .replace(/\*\*Run ID:\*\* \d+/g, '')
                  .replace(/runs\/\d+/g, 'runs/XXXXX')
                  .replace(/security-scan-results-\d+-\d+\.zip/g, 'security-scan-results-XXXXX.zip')
                  .replace(/\s+/g, ' ')
                  .trim();
              };
              
              const existingNormalized = normalizeContent(existingIssue.body);
              const newNormalized = normalizeContent(newBody);
              
              if (existingNormalized !== newNormalized) {
                // Content changed, update the issue
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  body: newBody
                });
                
                const updateComment = `üîÑ **Issue updated on ${currentDate}** - New linting problems detected.\n\n` +
                  `[View latest run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})` +
                  (hasArtifacts ? `\n\nüìé **Scan Results:** Download from [Artifacts section](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) (look for "security-scan-results")` : '');
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  body: updateComment
                });
              } else {
                // Same content, just add a comment about reoccurrence
                const sameIssueComment = `‚ö†Ô∏è **Same linting issues still present on ${currentDate}**\n\n` +
                  `[View latest run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})` +
                  (hasArtifacts ? `\n\nüìé **Scan Results:** Download from [Artifacts section](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) (look for "security-scan-results")` : '');
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  body: sameIssueComment
                });
              }
            } else {
              // No existing issue, create new one
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: newBody,
                labels: ['linting', 'code-quality', 'automated']
              });
            }

      - name: Create Trivy Security Issue
        if: always() && steps.trivy-config.outcome == 'failure'
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const fs = require('fs');
            const currentDate = new Date().toISOString().split('T')[0];
            const title = 'üõ°Ô∏è Security Issues Found in Dockerfile';
            
            // Artifacts are always available in GitHub Actions
            const hasArtifacts = true;
            
            const newBody = `
            ## Trivy Security Scan Results
            
            **Security misconfigurations found in Dockerfile**
            
            ### Critical Action Required
            [View detailed security results](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            [Check Security Tab](https://github.com/${context.repo.owner}/${context.repo.repo}/security/code-scanning)
            
            ${hasArtifacts ? `### üìé Complete Scan Results
            Download all security scan results from: [Artifacts section](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            
            Look for "security-scan-results" artifact which includes:
            - Trivy SARIF results (filesystem scanning)
            - CodeQL static analysis results
            - Super-Linter findings
            - Detailed vulnerability reports
            - Scan summary and metadata
            ` : ''}
            
            **Priority:** High
            **Type:** Security
            **Last Updated:** ${currentDate}
            **Run ID:** ${context.runId}
            `;
            
            // Get existing security issues
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['security', 'trivy']
            });
            
            const existingIssue = existingIssues.data.find(issue => 
              issue.title.includes('Security Issues Found')
            );
            
            if (existingIssue) {
              // Compare content (excluding dates and run IDs)
              const normalizeContent = (content) => {
                return content
                  .replace(/\*\*Last Updated:\*\* \d{4}-\d{2}-\d{2}/g, '')
                  .replace(/\*\*Run ID:\*\* \d+/g, '')
                  .replace(/runs\/\d+/g, 'runs/XXXXX')
                  .replace(/security-scan-results-\d+-\d+\.zip/g, 'security-scan-results-XXXXX.zip')
                  .replace(/\s+/g, ' ')
                  .trim();
              };
              
              const existingNormalized = normalizeContent(existingIssue.body);
              const newNormalized = normalizeContent(newBody);
              
              if (existingNormalized !== newNormalized) {
                // Content changed, update the issue
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  body: newBody
                });
                
                const updateComment = `üö® **SECURITY ISSUE UPDATED on ${currentDate}** - New or changed security problems detected!\n\n` +
                  `[View latest run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n\n` +
                  `‚ö†Ô∏è **High Priority - Please review immediately**` +
                  (hasArtifacts ? `\n\nüìé **Detailed Results:** Download from [Artifacts section](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) (look for "security-scan-results")` : '');
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  body: updateComment
                });
              } else {
                // Same content, just add a comment about reoccurrence
                const sameIssueComment = `üî¥ **Same security issues still present on ${currentDate}**\n\n` +
                  `[View latest run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n\n` +
                  `‚ö†Ô∏è **Please prioritize fixing these security issues**` +
                  (hasArtifacts ? `\n\nüìé **Scan Results:** Download from [Artifacts section](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) (look for "security-scan-results")` : '');
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  body: sameIssueComment
                });
              }
            } else {
              // No existing issue, create new one
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: newBody,
                labels: ['security', 'trivy', 'automated', 'high-priority']
              });
            }

      - name: Create CodeQL Security Issue
        if: always() && steps.codeql-analyze.outcome == 'failure'
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const fs = require('fs');
            const currentDate = new Date().toISOString().split('T')[0];
            const title = 'üî¨ CodeQL Security Analysis Issues Found';
            
            // Artifacts are always available in GitHub Actions
            const hasArtifacts = true;
            
            const newBody = `
            ## CodeQL Security Analysis Results
            
            **Security vulnerabilities detected by CodeQL static analysis**
            
            ### Critical Action Required
            CodeQL has identified potential security issues in the codebase that require immediate attention.
            
            **Common issues CodeQL finds:**
            - Command injection vulnerabilities
            - Path traversal issues
            - Unsafe string operations
            - Security misconfigurations
            
            ### Fix Required
            [View detailed CodeQL results](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            [Check Security Tab](https://github.com/${context.repo.owner}/${context.repo.repo}/security/code-scanning)
            
            ${hasArtifacts ? `### üìé Complete Security Analysis Package
            Download full security scan results: [security-scan-results](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            
            This package contains:
            - CodeQL static analysis findings
            - Trivy filesystem vulnerability assessments
            - Super-Linter code quality results
            - Cross-referenced security analysis
            - Comprehensive security report
            ` : ''}
            
            **Priority:** Critical
            **Type:** Security Vulnerability
            **Last Updated:** ${currentDate}
            **Run ID:** ${context.runId}
            `;
            
            // Get existing CodeQL security issues
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['security', 'codeql']
            });
            
            const existingIssue = existingIssues.data.find(issue => 
              issue.title.includes('CodeQL Security Analysis Issues Found')
            );
            
            if (existingIssue) {
              // Compare content (excluding dates and run IDs)
              const normalizeContent = (content) => {
                return content
                  .replace(/\*\*Last Updated:\*\* \d{4}-\d{2}-\d{2}/g, '')
                  .replace(/\*\*Run ID:\*\* \d+/g, '')
                  .replace(/runs\/\d+/g, 'runs/XXXXX')
                  .replace(/security-scan-results-\d+-\d+\.zip/g, 'security-scan-results-XXXXX.zip')
                  .replace(/\s+/g, ' ')
                  .trim();
              };
              
              const existingNormalized = normalizeContent(existingIssue.body);
              const newNormalized = normalizeContent(newBody);
              
              if (existingNormalized !== newNormalized) {
                // Content changed, update the issue
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  body: newBody
                });
                
                const updateComment = `üö® **CRITICAL: CodeQL SECURITY ISSUES UPDATED on ${currentDate}** - New security vulnerabilities detected!\n\n` +
                  `[View latest run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n\n` +
                  `üî¥ **IMMEDIATE ACTION REQUIRED - Security vulnerabilities found**` +
                  (hasArtifacts ? `\n\nüìé **Complete Analysis:** [security-scan-results](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})` : '');
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  body: updateComment
                });
              } else {
                // Same content, just add a comment about reoccurrence
                const sameIssueComment = `üî¥ **CRITICAL: Same security vulnerabilities still present on ${currentDate}**\n\n` +
                  `[View latest run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n\n` +
                  `‚ö†Ô∏è **URGENT: Please prioritize fixing these security vulnerabilities immediately**` +
                  (hasArtifacts ? `\n\nüìé **Security Package:** [security-scan-results](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})` : '');
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  body: sameIssueComment
                });
              }
            } else {
              // No existing issue, create new one
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: newBody,
                labels: ['security', 'codeql', 'automated', 'critical']
              });
            }

      - name: Create Issue on Failure
        if: failure()
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const fs = require('fs');
            const currentDate = new Date().toISOString().split('T')[0];
            const title = 'üö® Code Analysis Failed';
            
            // Check if scan results zip exists
            // Artifacts are always available in GitHub Actions
            const hasArtifacts = true;
            
            const newBody = `
            ## Code Analysis Failure Report
            
            **Workflow:** ${context.workflow}
            **Run ID:** ${context.runId}
            **Commit:** ${context.sha}
            **Branch/Ref:** ${context.ref}
            
            ### What happened?
            The automated code analysis workflow failed. This could be due to:
            - Linting issues found by Super-Linter
            - Security vulnerabilities found by Trivy
            - Configuration problems in Dockerfile
            - CodeQL static analysis issues
            
            ### Next Steps
            1. Check the [workflow run logs](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            2. Review any findings in the [Security tab](https://github.com/${context.repo.owner}/${context.repo.repo}/security/code-scanning)
            3. Fix the identified issues
            4. Close this issue once resolved
            
            ${hasArtifacts ? `### üìé Analysis Results Available
            Download complete scan results for detailed analysis: [security-scan-results](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            
            The package contains:
            - All SARIF security scan results
            - Detailed vulnerability reports
            - Tool-specific findings
            - Analysis summary and metadata
            ` : ''}
            
            **Last Updated:** ${currentDate}
            **Run ID:** ${context.runId}
            
            ### Auto-generated
            This issue was automatically created by the code analysis workflow.
            `;
            
            // Check if similar issue already exists
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['automated-analysis', 'bug']
            });
            
            const existingIssue = existingIssues.data.find(issue => 
              issue.title.includes('Code Analysis Failed')
            );
            
            if (existingIssue) {
              // Compare content (excluding dates, run IDs, and commit SHAs)
              const normalizeContent = (content) => {
                return content
                  .replace(/\*\*Last Updated:\*\* \d{4}-\d{2}-\d{2}/g, '')
                  .replace(/\*\*Run ID:\*\* \d+/g, '')
                  .replace(/\*\*Commit:\*\* [a-f0-9]+/g, '')
                  .replace(/runs\/\d+/g, 'runs/XXXXX')
                  .replace(/security-scan-results-\d+-\d+\.zip/g, 'security-scan-results-XXXXX.zip')
                  .replace(/\s+/g, ' ')
                  .trim();
              };
              
              const existingNormalized = normalizeContent(existingIssue.body);
              const newNormalized = normalizeContent(newBody);
              
              if (existingNormalized !== newNormalized) {
                // Content changed, update the issue
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  body: newBody
                });
                
                const updateComment = `üîÑ **Workflow failure updated on ${currentDate}** - New failure detected with different characteristics.\n\n` +
                  `[View latest run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})` +
                  (hasArtifacts ? `\n\nüìé **Analysis Results:** [security-scan-results](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})` : '');
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  body: updateComment
                });
              } else {
                // Same type of failure, just add a comment
                const sameFailureComment = `üîÑ **Same failure detected again on ${currentDate}**\n\n` +
                  `[View latest run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})` +
                  (hasArtifacts ? `\n\nüìé **Scan Results:** [security-scan-results](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})` : '');
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  body: sameFailureComment
                });
              }
            } else {
              // No existing issue, create new one
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: newBody,
                labels: ['automated-analysis', 'bug', 'security']
              });
            }
