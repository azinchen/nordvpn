name: "🔒 Comprehensive Security Analysis"

permissions:
  contents: read
  security-events: write
  actions: read
  issues: write

on:
  push:
    branches: [ '**' ]
    tags: [ '**' ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '0 4 * * *'  # Run at 4 AM UTC daily
  workflow_dispatch:

jobs:
  comprehensive-security:
    name: 🔒 Complete Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      # ============================================================================
      # SETUP & CHECKOUT
      # ============================================================================
      - name: Checkout repository
        uses: actions/checkout@v5.0.0

      # ============================================================================
      # CODEQL STATIC ANALYSIS
      # ============================================================================
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3.30.0
        with:
          languages: javascript
          build-mode: none
          queries: +security-extended,security-and-quality
          config: |
            name: "Advanced Security Configuration"
            queries:
              - uses: security-extended
              - uses: security-and-quality
            paths:
              - root/
              - scripts/
              - .github/
            paths-ignore:
              - "**/*.md"
              - "**/*.txt"
              - "**/*.json"
              - "LICENSE"

      - name: Perform CodeQL Analysis
        id: codeql-analysis
        uses: github/codeql-action/analyze@v3.30.0
        continue-on-error: true
        with:
          category: "/language:javascript"
          upload: true
          # Output SARIF file for inclusion in artifacts
          output: codeql-results.sarif

      # ============================================================================
      # SUPER-LINTER CODE QUALITY
      # ============================================================================
      - name: Run Super-Linter
        id: super-linter
        uses: super-linter/super-linter@v8.1.0
        continue-on-error: true
        env:
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITHUB_TOKEN: ${{ github.token }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_DOCKERFILE_HADOLINT: true
          VALIDATE_BASH: true
          VALIDATE_SHELL_SHFMT: true
          VALIDATE_MARKDOWN: true
          VALIDATE_JSON: true
          VALIDATE_YAML: true

      # ============================================================================
      # TRIVY VULNERABILITY SCANNING
      # ============================================================================
      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3.30.0
        if: always() && hashFiles('trivy-results.sarif') != ''
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-filesystem-security'

      - name: Run Trivy on Dockerfile
        id: trivy-config
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          scan-type: 'config'
          scan-ref: 'Dockerfile'
          format: 'table'

      # ============================================================================
      # RESULTS COMPILATION & ARTIFACTS
      # ============================================================================
      - name: Create comprehensive scan results
        if: always()
        run: |
          # Create directory for all scan results
          mkdir -p scan-results
          
          # Copy all scan result files if they exist
          [ -f "trivy-results.sarif" ] && cp trivy-results.sarif scan-results/
          [ -f "codeql-results.sarif" ] && cp codeql-results.sarif scan-results/
          
          # Create unified summary
          cat > scan-results/security-analysis-summary.md << 'EOF'
          # 🔒 Comprehensive Security Analysis Report
          EOF
          
          # Add dynamic content
          cat >> scan-results/security-analysis-summary.md << EOF
          
          **Analysis Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Repository:** ${{ github.repository }}
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          **Run ID:** ${{ github.run_id }}
          
          ## 🔍 Analysis Components
          
          ### 🔬 CodeQL Static Analysis
          - **Status:** ${{ steps.codeql-analysis.outcome }}
          - **Language:** JavaScript (with generic security patterns)
          - **Queries:** security-extended + security-and-quality
          - **Scope:** Shell scripts, configs, GitHub Actions workflows
          
          ### 🧹 Super-Linter Code Quality
          - **Status:** ${{ steps.super-linter.outcome }}
          - **Languages:** Bash, Dockerfile, Markdown, JSON, YAML
          - **Validation:** Syntax, style, and best practices
          
          ### 🛡️ Trivy Vulnerability Scanning
          - **Filesystem Status:** $([ -f "trivy-results.sarif" ] && echo "✅ Completed" || echo "❌ No results")
          - **Config Analysis Status:** ${{ steps.trivy-config.outcome }}
          - **Scope:** Dependencies, container vulnerabilities, misconfigurations
          
          ## 📊 Summary Statistics
          EOF
          
          # Add Trivy results count if available
          if [ -f "trivy-results.sarif" ] && command -v jq >/dev/null 2>&1; then
            TRIVY_COUNT=$(jq '.runs[0].results | length' trivy-results.sarif 2>/dev/null || echo "0")
            echo "- **Trivy Findings:** $TRIVY_COUNT security issues detected" >> scan-results/security-analysis-summary.md
          fi
          
          # Add CodeQL results count if available
          if [ -f "codeql-results.sarif" ] && command -v jq >/dev/null 2>&1; then
            CODEQL_COUNT=$(jq '.runs[0].results | length' codeql-results.sarif 2>/dev/null || echo "0")
            echo "- **CodeQL Findings:** $CODEQL_COUNT security issues detected" >> scan-results/security-analysis-summary.md
          fi
          
          # Add file listing
          cat >> scan-results/security-analysis-summary.md << 'EOF'
          
          ## 📁 Included Files
          EOF
          
          ls -la scan-results/ | grep -v "^total" | grep -v "^d" | \
            awk '{print "- " $9 " (" $5 " bytes)"}' >> scan-results/security-analysis-summary.md
          
          # Add links section
          cat >> scan-results/security-analysis-summary.md << EOF
          
          ## 🔗 View Results
          - [Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [Security Tab](https://github.com/${{ github.repository }}/security/code-scanning)
          - [CodeQL Results](https://github.com/${{ github.repository }}/security/code-scanning?tool=CodeQL)
          - [Trivy Results](https://github.com/${{ github.repository }}/security/code-scanning?tool=Trivy)
          
          ## 🛠️ Tools Information
          - **CodeQL:** Advanced static analysis for security vulnerabilities
          - **Trivy:** Comprehensive vulnerability scanner for containers and filesystems
          - **Super-Linter:** Multi-language linter for code quality and standards
          EOF
          
          # Create archive
          ZIP_FILENAME="comprehensive-security-analysis-$(date +%Y%m%d-%H%M%S).zip"
          zip -r "$ZIP_FILENAME" scan-results/

      # ============================================================================
      # ARTIFACT UPLOAD
      # ============================================================================
      - name: Upload comprehensive security results
        if: always()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: comprehensive-security-analysis
          path: comprehensive-security-analysis-*.zip
          retention-days: 30
          compression-level: 0
          if-no-files-found: ignore

      # ============================================================================
      # WORKFLOW SUMMARY
      # ============================================================================
      - name: Create workflow summary
        if: always()
        run: |
          echo "## 🔒 Comprehensive Security Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔬 CodeQL Analysis | ${{ steps.codeql-analysis.outcome }} | Static security analysis |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧹 Super-Linter | ${{ steps.super-linter.outcome }} | Code quality validation |" >> $GITHUB_STEP_SUMMARY
          echo "| 🛡️ Trivy Filesystem | $([ -f "trivy-results.sarif" ] && echo "✅ success" || echo "❌ failed") | Vulnerability scanning |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔧 Trivy Config | ${{ steps.trivy-config.outcome }} | Configuration analysis |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 SARIF Files Generated" >> $GITHUB_STEP_SUMMARY
          echo "- **CodeQL SARIF:** $([ -f "codeql-results.sarif" ] && echo "✅ Available" || echo "❌ Not generated")" >> $GITHUB_STEP_SUMMARY
          echo "- **Trivy SARIF:** $([ -f "trivy-results.sarif" ] && echo "✅ Available" || echo "❌ Not generated")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Security Tab](https://github.com/${{ github.repository }}/security/code-scanning)" >> $GITHUB_STEP_SUMMARY
          echo "- [Download Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

      # ============================================================================
      # ISSUE MANAGEMENT - SEPARATE DETAILED ISSUES FOR EACH TOOL
      # ============================================================================
      - name: Create CodeQL Security Issues
        if: always() && steps.codeql-analysis.outcome == 'failure'
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const currentDate = new Date().toISOString().split('T')[0];
            
            // Get CodeQL alerts for detailed reporting
            let codeqlFindings = "No specific findings data available through API in workflow context.";
            
            // Check if SARIF file exists for parsing
            const fs = require('fs');
            if (fs.existsSync('codeql-results.sarif')) {
              try {
                const sarif = JSON.parse(fs.readFileSync('codeql-results.sarif', 'utf8'));
                if (sarif.runs && sarif.runs[0] && sarif.runs[0].results) {
                  const results = sarif.runs[0].results;
                  if (results.length > 0) {
                    codeqlFindings = `## 🔬 CodeQL Findings (${results.length} issues)\n\n`;
                    results.slice(0, 10).forEach((result, index) => {
                      const ruleId = result.ruleId || 'Unknown Rule';
                      const message = result.message?.text || 'No description available';
                      const location = result.locations?.[0]?.physicalLocation?.artifactLocation?.uri || 'Unknown location';
                      const line = result.locations?.[0]?.physicalLocation?.region?.startLine || 'Unknown line';
                      
                      codeqlFindings += `### ${index + 1}. ${ruleId}\n`;
                      codeqlFindings += `- **Location:** \`${location}:${line}\`\n`;
                      codeqlFindings += `- **Description:** ${message}\n\n`;
                    });
                    if (results.length > 10) {
                      codeqlFindings += `*... and ${results.length - 10} more findings. Download the SARIF file for complete details.*\n\n`;
                    }
                  } else {
                    codeqlFindings = "✅ No security issues found by CodeQL analysis.";
                  }
                }
              } catch (error) {
                codeqlFindings = `❌ Error parsing CodeQL SARIF file: ${error.message}`;
              }
            }
            
            const issueTitle = '🔬 CodeQL Security Analysis Results';
            const issueBody = `# 🔬 CodeQL Static Security Analysis Report
            
            **Analysis Date:** ${currentDate}
            **Run ID:** ${context.runId}
            **Commit:** ${context.sha.substring(0, 8)}
            **Status:** ${{ steps.codeql-analysis.outcome }}
            
            ## 📊 Analysis Details
            - **Language:** JavaScript (with generic security patterns)
            - **Query Packs:** security-extended + security-and-quality
            - **Scope:** Shell scripts, configuration files, GitHub Actions workflows
            
            ${codeqlFindings}
            
            ## 🔗 Additional Resources
            - [Workflow Run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            - [Security Tab (CodeQL)](https://github.com/${context.repo.owner}/${context.repo.repo}/security/code-scanning?tool=CodeQL)
            - [Download SARIF Results](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            
            *Auto-generated by CodeQL security analysis workflow*
            `;
            
            // Handle existing issues
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['security', 'codeql']
            });
            
            const existingIssue = existingIssues.data.find(issue => 
              issue.title.includes('CodeQL Security Analysis Results')
            );
            
            if (existingIssue) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: `🔄 **Updated CodeQL Analysis - ${currentDate}**\n\n${issueBody}`
              });
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['security', 'codeql', 'automated-analysis']
              });
            }

      - name: Create Trivy Security Issues
        if: always() && hashFiles('trivy-results.sarif') != ''
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const currentDate = new Date().toISOString().split('T')[0];
            
            // Parse Trivy SARIF results for detailed reporting
            let trivyFindings = "No Trivy findings data available.";
            
            const fs = require('fs');
            if (fs.existsSync('trivy-results.sarif')) {
              try {
                const sarif = JSON.parse(fs.readFileSync('trivy-results.sarif', 'utf8'));
                if (sarif.runs && sarif.runs[0] && sarif.runs[0].results) {
                  const results = sarif.runs[0].results;
                  if (results.length > 0) {
                    trivyFindings = `## 🛡️ Trivy Vulnerability Findings (${results.length} issues)\n\n`;
                    
                    // Group by severity
                    const bySeverity = results.reduce((acc, result) => {
                      const severity = result.level || 'unknown';
                      if (!acc[severity]) acc[severity] = [];
                      acc[severity].push(result);
                      return acc;
                    }, {});
                    
                    Object.entries(bySeverity).forEach(([severity, findings]) => {
                      const emoji = severity === 'error' ? '🔴' : severity === 'warning' ? '🟡' : '🔵';
                      trivyFindings += `### ${emoji} ${severity.toUpperCase()} (${findings.length} issues)\n\n`;
                      
                      findings.slice(0, 5).forEach((result, index) => {
                        const ruleId = result.ruleId || 'Unknown CVE';
                        const message = result.message?.text || 'No description available';
                        const location = result.locations?.[0]?.physicalLocation?.artifactLocation?.uri || 'Unknown location';
                        
                        trivyFindings += `**${index + 1}. ${ruleId}**\n`;
                        trivyFindings += `- **Location:** \`${location}\`\n`;
                        trivyFindings += `- **Details:** ${message.substring(0, 200)}${message.length > 200 ? '...' : ''}\n\n`;
                      });
                      
                      if (findings.length > 5) {
                        trivyFindings += `*... and ${findings.length - 5} more ${severity} findings.*\n\n`;
                      }
                    });
                  } else {
                    trivyFindings = "✅ No vulnerabilities found by Trivy filesystem scan.";
                  }
                }
              } catch (error) {
                trivyFindings = `❌ Error parsing Trivy SARIF file: ${error.message}`;
              }
            }
            
            const issueTitle = '🛡️ Trivy Vulnerability Analysis Results';
            const issueBody = `# 🛡️ Trivy Security Vulnerability Report
            
            **Analysis Date:** ${currentDate}
            **Run ID:** ${context.runId}
            **Commit:** ${context.sha.substring(0, 8)}
            **Scan Type:** Filesystem vulnerability scanning
            
            ## 📊 Analysis Summary
            - **Scan Scope:** Complete repository filesystem
            - **Focus:** Dependencies, container images, known vulnerabilities
            - **Database:** Latest vulnerability definitions
            
            ${trivyFindings}
            
            ## 🔧 Remediation Steps
            1. **Review each vulnerability** listed above for impact assessment
            2. **Update dependencies** to fixed versions where available
            3. **Apply security patches** to vulnerable packages
            4. **Re-run analysis** to verify fixes
            
            ## 🔗 Additional Resources
            - [Workflow Run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            - [Security Tab (Trivy)](https://github.com/${context.repo.owner}/${context.repo.repo}/security/code-scanning?tool=Trivy)
            - [Download SARIF Results](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            
            *Auto-generated by Trivy vulnerability analysis workflow*
            `;
            
            // Handle existing issues
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['security', 'trivy']
            });
            
            const existingIssue = existingIssues.data.find(issue => 
              issue.title.includes('Trivy Vulnerability Analysis Results')
            );
            
            if (existingIssue) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: `🔄 **Updated Trivy Analysis - ${currentDate}**\n\n${issueBody}`
              });
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['security', 'trivy', 'automated-analysis', 'vulnerability']
              });
            }

      - name: Create Super-Linter Issues
        if: always() && steps.super-linter.outcome == 'failure'
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const currentDate = new Date().toISOString().split('T')[0];
            
            const issueTitle = '🧹 Super-Linter Code Quality Issues';
            const issueBody = `# 🧹 Super-Linter Code Quality Report
            
            **Analysis Date:** ${currentDate}
            **Run ID:** ${context.runId}
            **Commit:** ${context.sha.substring(0, 8)}
            **Status:** ${{ steps.super-linter.outcome }}
            
            ## 📊 Analysis Summary
            **Languages Analyzed:**
            - ✅ Bash scripts (shellcheck)
            - ✅ Dockerfile (hadolint)  
            - ✅ Markdown files (markdownlint)
            - ✅ JSON files (jsonlint)
            - ✅ YAML files (yamllint)
            
            ## 🚨 Issues Detected
            Super-Linter found code quality and style issues that need attention:
            
            ### Common Issue Types
            - **Shell Script Issues:** Potential syntax errors, unsafe patterns, best practice violations
            - **Dockerfile Issues:** Security misconfigurations, optimization opportunities
            - **Markdown Issues:** Formatting inconsistencies, broken links, style violations
            - **Configuration Issues:** JSON/YAML syntax errors, formatting problems
            
            ### 🔍 Detailed Analysis Required
            The specific linting errors are available in the workflow logs. Common patterns include:
            - Unquoted variables in shell scripts
            - Missing error handling in bash scripts
            - Dockerfile best practice violations
            - Markdown formatting inconsistencies
            
            ## 🔧 Remediation Steps
            1. **Review workflow logs** for specific file locations and error details
            2. **Fix linting issues** in the identified files
            3. **Run local linting** before committing (see development setup)
            4. **Re-run analysis** to verify fixes
            
            ### 🛠️ Local Development Setup
            \`\`\`bash
            # Install local linting tools
            npm install -g markdownlint-cli
            pip install yamllint
            
            # Run specific linters locally
            shellcheck script.sh
            hadolint Dockerfile
            markdownlint *.md
            yamllint *.yml
            \`\`\`
            
            ## 🔗 Additional Resources
            - [Workflow Run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            - [Super-Linter Documentation](https://github.com/super-linter/super-linter)
            - [Download Complete Results](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            
            *Auto-generated by Super-Linter code quality analysis workflow*
            `;
            
            // Handle existing issues
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['code-quality', 'super-linter']
            });
            
            const existingIssue = existingIssues.data.find(issue => 
              issue.title.includes('Super-Linter Code Quality Issues')
            );
            
            if (existingIssue) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: `🔄 **Updated Super-Linter Analysis - ${currentDate}**\n\n${issueBody}`
              });
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['code-quality', 'super-linter', 'automated-analysis']
              });
            }
