#!/command/with-contenv sh
# shellcheck shell=sh

set -eu

echo "[INIT-FIREWALL] Starting init-firewall script..."
echo "[INIT-FIREWALL] Setting up firewall - everything has to go through the VPN"

# -------- Backend chooser (nft -> legacy fallback) --------
pick_iptables_backend()
{
    IPT="iptables"

    if $IPT -V 2>&1 | grep -qi "(nf_tables)"; then
        if ! $IPT -S >/dev/null 2>&1; then
            command -v iptables-legacy >/dev/null 2>&1 && IPT="iptables-legacy"
        fi
    elif $IPT -V 2>&1 | grep -qi "(legacy)"; then
        command -v iptables-legacy >/dev/null 2>&1 && IPT="iptables-legacy"
    fi
}

pick_iptables_backend

add4() { if ! $IPT "$@" 2>/dev/null; then echo "[INIT-FIREWALL] (IPv4) skipped: $*"; fi; }

# BusyBox-friendly helpers
docker_network="$(ip addr show dev eth0 2>/dev/null | awk '/inet / {print $2; exit}')"
gw="$(ip route 2>/dev/null | awk '/default/ {print $3; exit}')"

# ===================== IPv4 =====================
if [ -n "${docker_network}" ]; then
    echo "[INIT-FIREWALL] IPv4 rules..."

    # Stateful fast-path (skip gracefully if conntrack match absent)
    add4 -A INPUT  -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
    add4 -A OUTPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

    # Allow outbound to VPN interfaces + NAT
    add4 -A OUTPUT -o tun+ -j ACCEPT
    add4 -t nat -A POSTROUTING -o tun+ -j MASQUERADE

    # NordVPN API bootstrap (TCP/443) by resolved IPs
    if [ -n "${NORDVPNAPI_IP:-}" ]; then
        echo "[INIT-FIREWALL] Processing NordVPN API IPv4 addresses from NORDVPNAPI_IP variable: ${NORDVPNAPI_IP}"
        oldIFS="$IFS"; IFS=',;'
        for ip in $NORDVPNAPI_IP; do
            [ -z "$ip" ] && continue
            add4 -A OUTPUT -d "$ip" -p tcp --dport 443 -j ACCEPT
        done
        IFS="$oldIFS"
    fi

    # NETWORK rules (CIDRs). If present, restrict inbound to these nets; do NOT add the broad eth0 accept.
    if [ -n "${NETWORK:-}" ]; then
        echo "[INIT-FIREWALL] Processing custom IPv4 networks from NETWORK variable: ${NETWORK}"
        oldIFS="$IFS"; IFS=',;'
        for net in $NETWORK; do
            [ -z "$net" ] && continue
            # Best-effort route add (if not already present)
            if [ -n "${gw:-}" ]; then
                ip route 2>/dev/null | grep -q " ${net} " || ip route add "$net" via "$gw" dev eth0 2>/dev/null || true
            fi
            # Allow inbound from this network only
            add4 -A INPUT -i eth0 -s "$net" -j ACCEPT
        done
        IFS="$oldIFS"
    fi
else
    echo "[INIT-FIREWALL] No IPv4 on eth0; skipping v4 rules."
fi

echo "[INIT-FIREWALL] init-firewall script completed successfully"
exit 0
