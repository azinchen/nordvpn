#!/command/with-contenv sh
# shellcheck shell=sh

set -eu

echo "[INIT-FIREWALL] Starting init-firewall script..."
echo "[INIT-FIREWALL] Setting up firewall - everything has to go through the VPN"

# Clear any existing rules before setting up new ones
iptables -F
iptables -X
ip6tables -F 2>/dev/null || true
ip6tables -X 2>/dev/null || true

# Set restrictive default policies
iptables -P OUTPUT DROP
iptables -P INPUT DROP
iptables -P FORWARD DROP
ip6tables -P OUTPUT DROP 2>/dev/null
ip6tables -P INPUT DROP 2>/dev/null
ip6tables -P FORWARD DROP 2>/dev/null

docker_network="$(ip -o addr show dev eth0 | awk '$3 == "inet" {print $4}')"
docker6_network="$(ip -o addr show dev eth0 | awk '$3 == "inet6" {print $4; exit}')"

if [ -n "${docker_network}" ]; then
    iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
    iptables -A INPUT -i lo -j ACCEPT
    iptables -A FORWARD -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
    iptables -A FORWARD -i lo -j ACCEPT
    iptables -A OUTPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
    iptables -A OUTPUT -o lo -j ACCEPT
    iptables -A OUTPUT -o tap+ -j ACCEPT
    iptables -A OUTPUT -o tun+ -j ACCEPT
    iptables -t nat -A POSTROUTING -o tap+ -j MASQUERADE
    iptables -t nat -A POSTROUTING -o tun+ -j MASQUERADE
fi
if [ -n "${docker6_network}" ]; then
    ip6tables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
    ip6tables -A INPUT -p icmp -j ACCEPT
    ip6tables -A INPUT -i lo -j ACCEPT
    ip6tables -A FORWARD -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
    ip6tables -A FORWARD -p icmp -j ACCEPT
    ip6tables -A FORWARD -i lo -j ACCEPT
    ip6tables -A OUTPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
    ip6tables -A OUTPUT -o lo -j ACCEPT
    ip6tables -A OUTPUT -o tap+ -j ACCEPT
    ip6tables -A OUTPUT -o tun+ -j ACCEPT
    ip6tables -t nat -A POSTROUTING -o tap+ -j MASQUERADE
    ip6tables -t nat -A POSTROUTING -o tun+ -j MASQUERADE
fi

# Allow DNS first (needed for hostname resolution)
if [ -n "${docker_network}" ]; then
    iptables -A OUTPUT -p udp -m udp --dport 53 -j ACCEPT
fi
if [ -n "${docker6_network}" ]; then
    ip6tables -A OUTPUT -p udp -m udp --dport 53 -j ACCEPT
fi

# Now resolve and allow access to NordVPN API
if [ -n "${docker_network}" ]; then
    if nordvpn_ips=$(nslookup api.nordvpn.com 2>/dev/null | awk '/^Address: / { print $2 }' | grep -v '#' | grep -v ':'); then
        for ip in $nordvpn_ips; do
            iptables -A OUTPUT -d "$ip" -j ACCEPT 2>/dev/null || true
        done
    else
        echo "[INIT-FIREWALL] Warning: Could not resolve api.nordvpn.com IPv4, allowing by hostname"
        iptables -A OUTPUT -d api.nordvpn.com -j ACCEPT 2>/dev/null || true
    fi
fi
if [ -n "${docker6_network}" ]; then
    if nordvpn_ipv6s=$(nslookup api.nordvpn.com 2>/dev/null | awk '/^Address: / { print $2 }' | grep ':'); then
        for ip in $nordvpn_ipv6s; do
            ip6tables -A OUTPUT -d "$ip" -j ACCEPT 2>/dev/null || true
        done
    else
        ip6tables -A OUTPUT -d api.nordvpn.com -j ACCEPT 2>/dev/null || true
    fi
fi

# Allow VPN ports
if [ -n "${docker_network}" ]; then
    iptables -A OUTPUT -p udp -m udp --dport 1194 -j ACCEPT
    iptables -A OUTPUT -p tcp -m tcp --dport 443 -j ACCEPT
fi
if [ -n "${docker6_network}" ]; then
    ip6tables -A OUTPUT -p udp -m udp --dport 1194 -j ACCEPT
    ip6tables -A OUTPUT -p tcp -m tcp --dport 443 -j ACCEPT
fi

echo "[INIT-FIREWALL] init-firewall script completed successfully"
exit 0
