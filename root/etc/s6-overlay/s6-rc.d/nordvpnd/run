#!/command/with-contenv sh
# shellcheck shell=sh

set -eu

echo "[SERVICE-NORDVPND] Starting nordvpnd service..."

# Paths (same as your original)
authfile="/run/xt/auth"
ovpnfile="/run/xt/nordvpn.ovpn"
OPENVPN_OPTS="${OPENVPN_OPTS:-}"

# Reuse backend selected by entrypoint
[ -r /run/xt/backend.env ] && . /run/xt/backend.env

# -------- helpers --------
ensure_tun()
{
    if [ ! -c /dev/net/tun ]; then
        echo "[SERVICE-NORDVPND] /dev/net/tun missing; creating (best effort)"
        mkdir -p /dev/net || true
        mknod /dev/net/tun c 10 200 2>/dev/null || true
        chmod 600 /dev/net/tun 2>/dev/null || true
    fi
}

normalize_proto()
{
    # Map OpenVPN tokens to "udp" or "tcp" (family handled by IP literal)
    case "$(echo "$1" | tr 'A-Z' 'a-z')" in
        tcp|tcp-client|tcp-server|tcp6|tcp6-client|tcp6-server) echo "tcp" ;;
        udp|udp-client|udp-server|udp6|udp6-client|udp6-server|"") echo "udp" ;;
        * ) echo "udp" ;;
    esac
}

# -------- parse the single 'remote' line --------
[ -s "$ovpnfile" ] || { echo "[ERROR] OVPN file not found: $ovpnfile" >&2; exit 1; }

r_line="$(awk '/^[[:space:]]*remote[ \t]+/ {print; exit}' "$ovpnfile")"
[ -n "$r_line" ] || { echo "[ERROR] No 'remote' line in $ovpnfile" >&2; exit 1; }

# Fields: remote <ip> [port] [proto]
r_ip_raw="$(echo "$r_line" | awk '{print $2}')"
r_port="$(echo "$r_line"   | awk '{print $3}')"
r_proto_raw="$(echo "$r_line" | awk '{print $4}')"

# Fallbacks from file if not specified on the remote line
[ -n "${r_port:-}" ] || r_port="$(awk '/^[[:space:]]*port[ \t]+/ {print $2; exit}' "$ovpnfile" || true)"
[ -n "${r_port:-}" ] || r_port=1194
r_proto="$(normalize_proto "$r_proto_raw")"

# Clean up any bracketed IPv6 (just in case)
r_ip="$(echo "$r_ip_raw" | sed 's,^\[,,' | sed 's,\]$,,' )"

# -------- add a single temporary pinhole on eth0 --------
PIN_SPEC="OUTPUT -o eth0 -p ${r_proto} -d ${r_ip} --dport ${r_port} -j ACCEPT"
if ! $IPT -C $PIN_SPEC 2>/dev/null; then
    $IPT -I $PIN_SPEC
    echo "[SERVICE-NORDVPND] pinhole added: $IPT -I $PIN_SPEC"
else
    echo "[SERVICE-NORDVPND] pinhole already present"
fi

cleanup() {
    echo "[SERVICE-NORDVPND] Cleaning VPN pinhole..."
    $IPT -D $PIN_SPEC 2>/dev/null || true
}

# -------- run OpenVPN --------
ensure_tun
trap 'kill -TERM "$ovpn_pid" 2>/dev/null || true' TERM
trap 'kill -INT  "$ovpn_pid" 2>/dev/null || true' INT
trap cleanup EXIT

echo "[SERVICE-NORDVPND] launching OpenVPN..."
sg nordvpn -c "openvpn --config \"$ovpnfile\" --auth-user-pass \"$authfile\" --auth-nocache ${OPENVPN_OPTS:-}" &
ovpn_pid=$!
wait "$ovpn_pid"
rc=$?

exit "$rc"
