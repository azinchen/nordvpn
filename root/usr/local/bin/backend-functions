#!/bin/sh
# shellcheck shell=sh

# Reuse backend selected by entrypoint
[ -r /run/xt/backend.env ] && . /run/xt/backend.env

# Create lowercase copies of environment variables
country="${COUNTRY:-}"
city="${CITY:-}"
technology="${TECHNOLOGY:-OpenVPN UDP}"
group="${GROUP:-}"
random_top="${RANDOM_TOP:-0}"
openvpn_opts="${OPENVPN_OPTS:-}"
network_diagnostic_enabled="${NETWORK_DIAGNOSTIC_ENABLED:-false}"
check_connection_attempts="${CHECK_CONNECTION_ATTEMPTS:-5}"
check_connection_url="${CHECK_CONNECTION_URL:-https://www.google.com}"
check_connection_attempt_interval="${CHECK_CONNECTION_ATTEMPT_INTERVAL:-10}"
user="${USER:-}"
pass="${PASS:-}"
recreate_vpn_cron="${RECREATE_VPN_CRON:-}"
check_connection_cron="${CHECK_CONNECTION_CRON:-}"
nordvpnapi_ip="${NORDVPNAPI_IP:-104.16.208.203;104.19.159.190}"
network="${NETWORK:-}"
puid=${PUID:-912}
pgid=${PGID:-912}

# Common file paths
ovpntemplatefile="/usr/local/share/nordvpn/data/template.ovpn"
ovpnfile="/run/xt/nordvpn.ovpn"
authfile="/run/xt/auth"

run4() {
    if ! ${IPT} "$@" 2>/dev/null; then
        log "BACKEND" "(IPv4) skipped: $*"
    fi
}

run4_critical() {
    if ! ${IPT} "$@" 2>/dev/null; then
        log_error "BACKEND" "(IPv4) CRITICAL ERROR: Failed to execute: $* - sleeping infinite"
        sleep infinity
    fi
}

run6() {
    if [ -n "$IP6T" ]; then
        if ! ${IP6T} "$@" 2>/dev/null; then
            log "BACKEND" "(IPv6) skipped: $*"
        fi
    fi
}

run6_critical() {
    if [ -n "$IP6T" ]; then
        if ! ${IP6T} "$@" 2>/dev/null; then
            log_error "BACKEND" "(IPv6) CRITICAL ERROR: Failed to execute: $*"
        fi
    fi
}

# Check if VPN is connected by checking for tun interface
is_vpn_connected() {
    if ip link show tun0 >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

log()
{
    script_name="${1:-unknown}"
    shift
    printf "%s [%s] %s\n" "$(date +'%Y-%m-%d %H:%M:%S')" "${script_name}" "$*"
}

log_error()
{
    script_name="${1:-unknown}"
    shift
    printf "%s [%s] [ERROR] %s\n" "$(date +'%Y-%m-%d %H:%M:%S')" "${script_name}" "$*" >&2
}

log_warning()
{
    script_name="${1:-unknown}"
    shift
    printf "%s [%s] [WARNING] %s\n" "$(date +'%Y-%m-%d %H:%M:%S')" "${script_name}" "$*"
}

# Parse cron expression and return human-readable description
parse_cron()
{
    cron_expr="$1"
    
    # Split cron expression into fields
    minute=$(echo "$cron_expr" | awk '{print $1}')
    hour=$(echo "$cron_expr" | awk '{print $2}')
    day=$(echo "$cron_expr" | awk '{print $3}')
    month=$(echo "$cron_expr" | awk '{print $4}')
    weekday=$(echo "$cron_expr" | awk '{print $5}')
    
    description=""
    
    # Helper function to parse cron field values
    parse_field() {
        local field_value="$1"
        local field_type="$2"
        local result=""
        
        # Handle asterisk (every value)
        if [ "$field_value" = "*" ]; then
            case "$field_type" in
                "minute") result="every minute" ;;
                "hour") result="every hour" ;;
                "day") result="every day" ;;
                "month") result="every month" ;;
                "weekday") result="every day" ;;
            esac
            echo "$result"
            return
        fi
        
        # Handle step values (*/n)
        if echo "$field_value" | grep -q '^*/'; then
            step=$(echo "$field_value" | cut -d'/' -f2)
            case "$field_type" in
                "minute") result="every $step minutes" ;;
                "hour") result="every $step hours" ;;
                "day") result="every $step days" ;;
                "month") result="every $step months" ;;
                "weekday") result="every $step days" ;;
            esac
            echo "$result"
            return
        fi
        
        # Handle ranges with steps (start-end/step)
        if echo "$field_value" | grep -q '/'; then
            range=$(echo "$field_value" | cut -d'/' -f1)
            step=$(echo "$field_value" | cut -d'/' -f2)
            start=$(echo "$range" | cut -d'-' -f1)
            end=$(echo "$range" | cut -d'-' -f2)
            
            case "$field_type" in
                "minute") result="every $step minutes from minute $start to $end" ;;
                "hour") 
                    # Convert to readable time format
                    if [ "$start" = "0" ]; then start_time="midnight"
                    elif [ "$start" -lt 12 ]; then start_time="${start}:00 AM"
                    elif [ "$start" = "12" ]; then start_time="noon"
                    else start_time="$((start-12)):00 PM"
                    fi
                    
                    if [ "$end" = "0" ]; then end_time="midnight"
                    elif [ "$end" -lt 12 ]; then end_time="${end}:00 AM"
                    elif [ "$end" = "12" ]; then end_time="noon"
                    else end_time="$((end-12)):00 PM"
                    fi
                    
                    result="every $step hours from $start_time to $end_time" ;;
                "day") result="every $step days from day $start to $end" ;;
                "month") result="every $step months from month $start to $end" ;;
                "weekday") result="every $step days from weekday $start to $end" ;;
            esac
            echo "$result"
            return
        fi
        
        # Handle ranges (start-end) - but not if it contains commas (handled by lists)
        has_comma=$(echo "$field_value" | grep -c ',')
        if echo "$field_value" | grep -q '-' && [ "$has_comma" = "0" ]; then
            start=$(echo "$field_value" | cut -d'-' -f1)
            end=$(echo "$field_value" | cut -d'-' -f2)
            
            case "$field_type" in
                "minute") result="minutes $start-$end" ;;
                "hour") 
                    # Convert to readable time format
                    if [ "$start" = "0" ]; then start_time="midnight"
                    elif [ "$start" -lt 12 ]; then start_time="${start}:00 AM"
                    elif [ "$start" = "12" ]; then start_time="noon"
                    else start_time="$((start-12)):00 PM"
                    fi
                    
                    if [ "$end" = "0" ]; then end_time="midnight"
                    elif [ "$end" -lt 12 ]; then end_time="${end}:00 AM"
                    elif [ "$end" = "12" ]; then end_time="noon"
                    else end_time="$((end-12)):00 PM"
                    fi
                    
                    result="$start_time-$end_time" ;;
                "day") result="days $start-$end" ;;
                "month") 
                    start_month=$(case "$start" in 1) echo "January";; 2) echo "February";; 3) echo "March";; 4) echo "April";; 5) echo "May";; 6) echo "June";; 7) echo "July";; 8) echo "August";; 9) echo "September";; 10) echo "October";; 11) echo "November";; 12) echo "December";; *) echo "$start";; esac)
                    end_month=$(case "$end" in 1) echo "January";; 2) echo "February";; 3) echo "March";; 4) echo "April";; 5) echo "May";; 6) echo "June";; 7) echo "July";; 8) echo "August";; 9) echo "September";; 10) echo "October";; 11) echo "November";; 12) echo "December";; *) echo "$end";; esac)
                    result="from $start_month to $end_month" ;;
                "weekday")
                    start_day=$(case "$start" in 0) echo "Sunday";; 1) echo "Monday";; 2) echo "Tuesday";; 3) echo "Wednesday";; 4) echo "Thursday";; 5) echo "Friday";; 6) echo "Saturday";; *) echo "$start";; esac)
                    end_day=$(case "$end" in 0) echo "Sunday";; 1) echo "Monday";; 2) echo "Tuesday";; 3) echo "Wednesday";; 4) echo "Thursday";; 5) echo "Friday";; 6) echo "Saturday";; *) echo "$end";; esac)
                    result="from $start_day to $end_day" ;;
            esac
            echo "$result"
            return
        fi
        
        # Handle lists (val1,val2,val3) - can include multiple ranges
        has_comma=$(echo "$field_value" | grep -c ',')
        if [ "$has_comma" -gt 0 ]; then
            result=""
            IFS=','
            for val in $field_value; do
                if [ -n "$result" ]; then
                    result="$result, "
                fi
                
                # Handle ranges within lists (like 1-7,15-21)
                if echo "$val" | grep -q '-'; then
                    start=$(echo "$val" | cut -d'-' -f1)
                    end=$(echo "$val" | cut -d'-' -f2)
                    
                    case "$field_type" in
                        "minute") result="${result}minutes $start-$end" ;;
                        "hour") 
                            # Convert to readable time format for ranges in lists
                            if [ "$start" = "0" ]; then start_time="midnight"
                            elif [ "$start" -lt 12 ]; then start_time="${start}:00 AM"
                            elif [ "$start" = "12" ]; then start_time="noon"
                            else start_time="$((start-12)):00 PM"
                            fi
                            
                            if [ "$end" = "0" ]; then end_time="midnight"
                            elif [ "$end" -lt 12 ]; then end_time="${end}:00 AM"
                            elif [ "$end" = "12" ]; then end_time="noon"
                            else end_time="$((end-12)):00 PM"
                            fi
                            
                            result="${result}$start_time-$end_time" ;;
                        "day") result="${result}days $start-$end" ;;
                        "month") 
                            start_month=$(case "$start" in 1) echo "January";; 2) echo "February";; 3) echo "March";; 4) echo "April";; 5) echo "May";; 6) echo "June";; 7) echo "July";; 8) echo "August";; 9) echo "September";; 10) echo "October";; 11) echo "November";; 12) echo "December";; *) echo "$start";; esac)
                            end_month=$(case "$end" in 1) echo "January";; 2) echo "February";; 3) echo "March";; 4) echo "April";; 5) echo "May";; 6) echo "June";; 7) echo "July";; 8) echo "August";; 9) echo "September";; 10) echo "October";; 11) echo "November";; 12) echo "December";; *) echo "$end";; esac)
                            result="${result}$start_month-$end_month" ;;
                        "weekday")
                            start_day=$(case "$start" in 0) echo "Sunday";; 1) echo "Monday";; 2) echo "Tuesday";; 3) echo "Wednesday";; 4) echo "Thursday";; 5) echo "Friday";; 6) echo "Saturday";; *) echo "$start";; esac)
                            end_day=$(case "$end" in 0) echo "Sunday";; 1) echo "Monday";; 2) echo "Tuesday";; 3) echo "Wednesday";; 4) echo "Thursday";; 5) echo "Friday";; 6) echo "Saturday";; *) echo "$end";; esac)
                            result="${result}$start_day-$end_day" ;;
                    esac
                else
                    # Handle individual values in the list
                    case "$field_type" in
                        "minute") result="${result}minute $val" ;;
                        "hour") 
                            if [ "$val" = "0" ]; then result="${result}midnight"
                            elif [ "$val" -lt 12 ]; then result="${result}$val:00 AM"
                            elif [ "$val" = "12" ]; then result="${result}noon"
                            else result="${result}$(($val-12)):00 PM"
                            fi ;;
                        "day") result="${result}day $val" ;;
                        "month")
                            case "$val" in
                                1) result="${result}January" ;;
                                2) result="${result}February" ;;
                                3) result="${result}March" ;;
                                4) result="${result}April" ;;
                                5) result="${result}May" ;;
                                6) result="${result}June" ;;
                                7) result="${result}July" ;;
                                8) result="${result}August" ;;
                                9) result="${result}September" ;;
                                10) result="${result}October" ;;
                                11) result="${result}November" ;;
                                12) result="${result}December" ;;
                                *) result="${result}month $val" ;;
                            esac ;;
                        "weekday")
                            case "$val" in
                                0) result="${result}Sunday" ;;
                                1) result="${result}Monday" ;;
                                2) result="${result}Tuesday" ;;
                                3) result="${result}Wednesday" ;;
                                4) result="${result}Thursday" ;;
                                5) result="${result}Friday" ;;
                                6) result="${result}Saturday" ;;
                                *) result="${result}weekday $val" ;;
                            esac ;;
                    esac
                fi
            done
            
            echo "$result"
            return
        fi
        
        # Handle single values
        case "$field_type" in
            "minute") result="minute $field_value" ;;
            "hour") 
                if [ "$field_value" = "0" ]; then result="midnight"
                elif [ "$field_value" -lt 12 ]; then result="$field_value:00 AM"
                elif [ "$field_value" = "12" ]; then result="noon"
                else result="$(($field_value-12)):00 PM"
                fi ;;
            "day") result="day $field_value" ;;
            "month")
                case "$field_value" in
                    1) result="January" ;;
                    2) result="February" ;;
                    3) result="March" ;;
                    4) result="April" ;;
                    5) result="May" ;;
                    6) result="June" ;;
                    7) result="July" ;;
                    8) result="August" ;;
                    9) result="September" ;;
                    10) result="October" ;;
                    11) result="November" ;;
                    12) result="December" ;;
                    *) result="month $field_value" ;;
                esac ;;
            "weekday")
                case "$field_value" in
                    0) result="Sunday" ;;
                    1) result="Monday" ;;
                    2) result="Tuesday" ;;
                    3) result="Wednesday" ;;
                    4) result="Thursday" ;;
                    5) result="Friday" ;;
                    6) result="Saturday" ;;
                    *) result="weekday $field_value" ;;
                esac ;;
        esac
        
        echo "$result"
    }
    
    # Parse each field
    minute_desc=$(parse_field "$minute" "minute")
    hour_desc=$(parse_field "$hour" "hour")
    day_desc=$(parse_field "$day" "day")
    month_desc=$(parse_field "$month" "month")
    weekday_desc=$(parse_field "$weekday" "weekday")
    
    # Build description
    description=""
    
    # Handle time components with better logic
    if [ "$minute_desc" = "every minute" ] && [ "$hour_desc" = "every hour" ]; then
        description="every minute"
    elif echo "$minute_desc" | grep -q "every.*minute" && echo "$hour_desc" | grep -q "every.*hour"; then
        # Both have step values
        description="$minute_desc, $hour_desc"
    elif echo "$minute_desc" | grep -q "every.*minute" && [ "$hour_desc" != "every hour" ]; then
        # Minute has step, hour is specific
        description="$minute_desc at $hour_desc"
    elif [ "$minute_desc" = "minute 0" ] && echo "$hour_desc" | grep -q "every.*hour"; then
        description="hourly"
    elif [ "$minute_desc" = "minute 0" ] && [ "$hour_desc" = "midnight" ]; then
        description="daily at midnight"
    elif [ "$minute_desc" = "minute 0" ]; then
        description="at $hour_desc"
    elif echo "$hour_desc" | grep -q ".*-.*"; then
        # Hour range like "9:00 AM-5:00 PM"
        if echo "$minute_desc" | grep -q "every.*minute"; then
            description="$minute_desc from $hour_desc"
        else
            description="$minute_desc at $hour_desc"
        fi
    else
        description="$minute_desc at $hour_desc"
    fi
    
    # Add day/month/weekday constraints
    if [ "$day_desc" != "every day" ] && [ -n "$day_desc" ]; then
        description="$description on $day_desc"
    fi
    
    if [ "$month_desc" != "every month" ] && [ -n "$month_desc" ]; then
        description="$description in $month_desc"
    fi
    
    if [ "$weekday_desc" != "every day" ] && [ -n "$weekday_desc" ]; then
        description="$description on $weekday_desc"
    fi
    
    echo "$description"
}
