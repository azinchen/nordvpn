#!/bin/sh
# shellcheck shell=sh

# Reuse backend selected by entrypoint
[ -r /run/xt/backend.env ] && . /run/xt/backend.env

# Create lowercase copies of environment variables
country="${COUNTRY:-}"
city="${CITY:-}"
technology="${TECHNOLOGY:-OpenVPN UDP}"
group="${GROUP:-}"
random_top="${RANDOM_TOP:-0}"
openvpn_opts="${OPENVPN_OPTS:-}"
network_diagnostic_enabled="${NETWORK_DIAGNOSTIC_ENABLED:-false}"
check_connection_attempts="${CHECK_CONNECTION_ATTEMPTS:-5}"
check_connection_url="${CHECK_CONNECTION_URL:-https://www.google.com}"
check_connection_attempt_interval="${CHECK_CONNECTION_ATTEMPT_INTERVAL:-10}"
user="${USER:-}"
pass="${PASS:-}"
recreate_vpn_cron="${RECREATE_VPN_CRON:-}"
check_connection_cron="${CHECK_CONNECTION_CRON:-}"
nordvpnapi_ip="${NORDVPNAPI_IP:-104.16.208.203;104.19.159.190}"
network="${NETWORK:-}"
puid=${PUID:-912}
pgid=${PGID:-912}

# Common file paths
ovpntemplatefile="/usr/local/share/nordvpn/data/template.ovpn"
ovpnfile="/run/xt/nordvpn.ovpn"
authfile="/run/xt/auth"

run4() {
    if ! ${IPT} "$@" 2>/dev/null; then
        log "BACKEND" "(IPv4) skipped: $*"
    fi
}

run4_critical() {
    if ! ${IPT} "$@" 2>/dev/null; then
        log_error "BACKEND" "(IPv4) CRITICAL ERROR: Failed to execute: $* - sleeping infinite"
        sleep infinity
    fi
}

run6() {
    if [ -n "$IP6T" ]; then
        if ! ${IP6T} "$@" 2>/dev/null; then
            log "BACKEND" "(IPv6) skipped: $*"
        fi
    fi
}

run6_critical() {
    if [ -n "$IP6T" ]; then
        if ! ${IP6T} "$@" 2>/dev/null; then
            log_error "BACKEND" "(IPv6) CRITICAL ERROR: Failed to execute: $*"
        fi
    fi
}

# Check if VPN is connected by checking for tun interface
is_vpn_connected() {
    if ip link show tun0 >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

log()
{
    script_name="${1:-unknown}"
    shift
    printf "%s [%s] %s\n" "$(date +'%Y-%m-%d %H:%M:%S')" "${script_name}" "$*"
}

log_error()
{
    script_name="${1:-unknown}"
    shift
    printf "%s [%s] [ERROR] %s\n" "$(date +'%Y-%m-%d %H:%M:%S')" "${script_name}" "$*" >&2
}

log_warning()
{
    script_name="${1:-unknown}"
    shift
    printf "%s [%s] [WARNING] %s\n" "$(date +'%Y-%m-%d %H:%M:%S')" "${script_name}" "$*"
}
