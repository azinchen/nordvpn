#!/command/with-contenv sh
# shellcheck shell=sh

set -eu

. /usr/local/bin/backend-functions

log "VPN-CONFIG" "Starting vpn-config script..."

numericregex="^[0-9]+$"

# Helper functions for pattern matching (sh-compatible)
is_numeric()
{
    case "$1" in
        ''|*[!0-9]*) return 1 ;;
        *) return 0 ;;
    esac
}

is_specific_server()
{
    case "$1" in
        [a-zA-Z][a-zA-Z][0-9]*)
            # Check if it's exactly 2 letters followed by numbers
            prefix=$(echo "$1" | cut -c1-2)
            suffix=$(echo "$1" | cut -c3-)
            case "$prefix" in
                [a-zA-Z][a-zA-Z]) ;;
                *) return 1 ;;
            esac
            case "$suffix" in
                ''|*[!0-9]*) return 1 ;;
                *) return 0 ;;
            esac
            ;;
        *) return 1 ;;
    esac
}

contains_substring()
{
    case "$1" in
        *"$2"*) return 0 ;;
        *) return 1 ;;
    esac
}

getcountryid()
{
    input=$1

    if is_numeric "$input"; then
        id=$(jq -r --argjson ID "$input" 'select(.id == $ID) | .id' < "/usr/local/share/nordvpn/data/countries.json")
    else
        id=$(jq -r --arg NAME "$input" 'select(.name == $NAME) | .id' < "/usr/local/share/nordvpn/data/countries.json")
        if [ -z "$id" ]; then
            id=$(jq -r --arg CODE "$input" 'select(.code == $CODE) | .id' < "/usr/local/share/nordvpn/data/countries.json")
        fi
    fi

    printf '%s' "$id"

    if [ -z "$id" ]; then
        return 1
    fi

    return 0
}

getcountryname()
{
    input=$1

    if is_numeric "$input"; then
        name=$(jq -r --argjson ID "$input" 'select(.id == $ID) | .name' < "/usr/local/share/nordvpn/data/countries.json")
    else
        name=$(jq -r --arg NAME "$input" 'select(.name == $NAME) | .name' < "/usr/local/share/nordvpn/data/countries.json")
        if [ -z "$name" ]; then
            name=$(jq -r --arg CODE "$input" 'select(.code == $CODE) | .name' < "/usr/local/share/nordvpn/data/countries.json")
        fi
    fi

    printf '%s' "$name"

    if [ -z "$name" ]; then
        return 1
    fi

    return 0
}

getcityid()
{
    input=$1

    if is_numeric "$input"; then
        id=$(jq -r --argjson ID "$input" 'select(.cities[]? | .id == $ID) | .cities[] | select(.id == $ID) | .id' < "/usr/local/share/nordvpn/data/countries.json" | head -n 1)
    else
        id=$(jq -r --arg NAME "$input" 'select(.cities[]? | .name == $NAME) | .cities[] | select(.name == $NAME) | .id' < "/usr/local/share/nordvpn/data/countries.json" | head -n 1)
        if [ -z "$id" ]; then
            id=$(jq -r --arg DNS_NAME "$input" 'select(.cities[]? | .dns_name == $DNS_NAME) | .cities[] | select(.dns_name == $DNS_NAME) | .id' < "/usr/local/share/nordvpn/data/countries.json" | head -n 1)
        fi
    fi

    printf '%s' "$id"

    if [ -z "$id" ]; then
        return 1
    fi

    return 0
}

getcityname()
{
    input=$1

    if is_numeric "$input"; then
        name=$(jq -r --argjson ID "$input" 'select(.cities[]? | .id == $ID) | .cities[] | select(.id == $ID) | .name' < "/usr/local/share/nordvpn/data/countries.json" | head -n 1)
    else
        name=$(jq -r --arg NAME "$input" 'select(.cities[]? | .name == $NAME) | .cities[] | select(.name == $NAME) | .name' < "/usr/local/share/nordvpn/data/countries.json" | head -n 1)
        if [ -z "$name" ]; then
            name=$(jq -r --arg DNS_NAME "$input" 'select(.cities[]? | .dns_name == $DNS_NAME) | .cities[] | select(.dns_name == $DNS_NAME) | .name' < "/usr/local/share/nordvpn/data/countries.json" | head -n 1)
        fi
    fi

    printf '%s' "$name"

    if [ -z "$name" ]; then
        return 1
    fi

    return 0
}

getcitycoordinates()
{
    input=$1

    # First get the city ID using existing function
    cityid=$(getcityid "$input")
    if [ -z "$cityid" ]; then
        return 1
    fi

    # Then get coordinates using the city ID
    coords=$(jq -r --argjson ID "$cityid" 'select(.cities[]? | .id == $ID) | .cities[] | select(.id == $ID) | "\(.latitude),\(.longitude)"' < "/usr/local/share/nordvpn/data/countries.json" | head -n 1)

    printf '%s' "$coords"

    if [ -z "$coords" ] || [ "$coords" = "null,null" ]; then
        return 1
    fi

    return 0
}

getgroupid()
{
    input=$1

    # Check for empty input
    if [ -z "$input" ]; then
        return 1
    fi

    if is_numeric "$input"; then
        id=$(jq -r --argjson ID "$input" 'select(.id == $ID) | .id' < "/usr/local/share/nordvpn/data/groups.json")
    else
        id=$(jq -r --arg TITLE "$input" 'select(.title == $TITLE) | .id' < "/usr/local/share/nordvpn/data/groups.json")
        if [ -z "$id" ]; then
            id=$(jq -r --arg IDENTIFIER "$input" 'select(.identifier == $IDENTIFIER) | .id' < "/usr/local/share/nordvpn/data/groups.json")
        fi
    fi

    printf '%s' "$id"

    if [ -z "$id" ]; then
        return 1
    fi

    return 0
}

getgrouptitle()
{
    input=$1

    if is_numeric "$input"; then
        title=$(jq -r --argjson ID "$input" 'select(.id == $ID) | .title' < "/usr/local/share/nordvpn/data/groups.json")
    else
        title=$(jq -r --arg TITLE "$input" 'select(.title == $TITLE) | .title' < "/usr/local/share/nordvpn/data/groups.json")
        if [ -z "$title" ]; then
            title=$(jq -r --arg IDENTIFIER "$input" 'select(.identifier == $IDENTIFIER) | .title' < "/usr/local/share/nordvpn/data/groups.json")
        fi
    fi

    printf '%s' "$title"

    if [ -z "$title" ]; then
        return 1
    fi

    return 0
}

gettechnologyid()
{
    input=$1

    # Check for empty input
    if [ -z "$input" ]; then
        return 1
    fi

    if is_numeric "$input"; then
        id=$(jq -r --argjson ID "$input" 'select(.id == $ID) | .id' < "/usr/local/share/nordvpn/data/technologies.json")
    else
        id=$(jq -r --arg NAME "$input" 'select(.name == $NAME) | .id' < "/usr/local/share/nordvpn/data/technologies.json")
        if [ -z "$id" ]; then
            id=$(jq -r --arg IDENTIFIER "$input" 'select(.identifier == $IDENTIFIER) | .id' < "/usr/local/share/nordvpn/data/technologies.json")
        fi
    fi

    printf '%s' "$id"

    if [ -z "$id" ]; then
        return 1
    fi

    return 0
}

gettechnologyname()
{
    input=$1

    if is_numeric "$input"; then
        name=$(jq -r --argjson ID "$input" 'select(.id == $ID) | .name' < "/usr/local/share/nordvpn/data/technologies.json")
    else
        name=$(jq -r --arg NAME "$input" 'select(.name == $NAME) | .name' < "/usr/local/share/nordvpn/data/technologies.json")
        if [ -z "$name" ]; then
            name=$(jq -r --arg IDENTIFIER "$input" 'select(.identifier == $IDENTIFIER) | .name' < "/usr/local/share/nordvpn/data/technologies.json")
        fi
    fi

    printf '%s' "$name"

    if [ -z "$name" ]; then
        return 1
    fi

    return 0
}

getopenvpnprotocol()
{
    input=$1

    ident=$(jq -r --arg NAME "$input" 'select(.name == $NAME) | .identifier' < "/usr/local/share/nordvpn/data/technologies.json")
    if [ -z "$ident" ]; then
        if is_numeric "$input"; then
            ident=$(jq -r --argjson ID "$input" 'select(.id == $ID) | .identifier' < "/usr/local/share/nordvpn/data/technologies.json")
        fi
    fi
    if [ -z "$ident" ]; then
        ident=$input
    fi

    if ! contains_substring "$ident" "openvpn"; then
        printf ""
        return 1
    elif contains_substring "$ident" "udp"; then
        printf "udp"
        return 0
    elif contains_substring "$ident" "tcp"; then
        printf "tcp"
        return 0
    else
        printf ""
        return 1
    fi
}

handle_specific_server()
{
    value=$1
    
    # Convert to lowercase using tr instead of ${value,,}
    hostname="$(echo "$value" | tr '[:upper:]' '[:lower:]').nordvpn.com"
    ip="$(host -t A "$hostname" | awk '{print $4}')"
    # Extract country code (first 2 chars) and number part
    country_code=$(echo "$value" | cut -c1-2)
    country_num=$(echo "$value" | cut -c3-)
    name="$(getcountryname "$country_code") #$country_num"
    constructed_json=$(printf '{"name":"%s","hostname":"%s","load":0,"station":"%s"}' "$name" "$hostname" "$ip")
    
    printf '%s' "$constructed_json"
}

nord_api_curl()
{
    _path="$1"
    shift 2>/dev/null || true

    oldIFS="$IFS"; IFS=',;'; _rc=1
    for _ip in $nordvpnapi_ip; do
        [ -n "$_ip" ] || continue

        curl -sG --connect-timeout 10 --max-time 30 \
             --resolve "api.nordvpn.com:443:${_ip}" \
             "https://api.nordvpn.com/${_path}" "$@"
        _rc=$?
        [ $_rc -eq 0 ] && IFS="$oldIFS" && return 0
    done
    IFS="$oldIFS"
    return $_rc
}

servers=""
locations_count=0

# Validate technology and group IDs and build filter strings
tech_filter=""
if [ -n "$technology" ]; then
    tech_id=$(gettechnologyid "$technology")
    if [ -z "$tech_id" ]; then
        log "VPN-CONFIG" "Warning: Could not find technology \"$technology\""
    else
        tech_filter="--data-urlencode filters[servers_technologies][id]=$tech_id"
    fi
else
    log "VPN-CONFIG" "No technology filter specified"
fi

group_filter=""
if [ -n "$group" ]; then
    group_id=$(getgroupid "$group")
    if [ -z "$group_id" ]; then
        log "VPN-CONFIG" "Warning: Could not find group \"$group\""
    else
        group_filter="--data-urlencode filters[servers_groups][id]=$group_id"
    fi
else
    log "VPN-CONFIG" "No group filter specified"
fi

test_response=$(nord_api_curl "v1/servers/recommendations" --data-urlencode "limit=1" 2>/dev/null || echo "")
if [ -z "$test_response" ]; then
    log "VPN-CONFIG" "WARNING: API connectivity test failed - no response from NordVPN API"
fi
servers=""
locations_count=0

# Process COUNTRY if set
if [ -n "$country" ]; then
    # Convert semicolon/comma separated list to space separated
    oldIFS="$IFS"; IFS=',;'; _rc=1
    for value in $country; do
        if [ -n "$value" ]; then
            locations_count=$((locations_count + 1))
        fi
        if is_specific_server "$value"; then
            servers="$servers$(handle_specific_server "$value")"
        elif [ -n "$value" ]; then
            countryid=$(getcountryid "$value")
            if [ -n "$countryid" ]; then
                # Build curl parameters
                curl_params="--data-urlencode filters[country_id]=$countryid"
                if [ -n "$tech_filter" ]; then
                    curl_params="$curl_params $tech_filter"
                fi
                if [ -n "$group_filter" ]; then
                    curl_params="$curl_params $group_filter"
                fi
                
                # Execute curl with built parameters
                serversincountry=$(eval "nord_api_curl \"v1/servers/recommendations\" $curl_params 2>/dev/null | jq -c '.[]' 2>/dev/null || echo \"\"")
                if [ -n "$serversincountry" ]; then
                    log "VPN-CONFIG" "Request servers in \"$(getcountryname "$value")\", $(echo "$serversincountry" | jq -s 'length') servers received"
                    echo "$serversincountry" | jq -r '[.name, .hostname, .load, .locations[0].country.name, .locations[0].country.city.name] | "\(.[1]): \(.[2])% load - \(.[3]), \(.[4]) (\(.[0]))"'
                    servers="$servers""$serversincountry"
                else
                    log "VPN-CONFIG" "Warning: No servers returned for country \"$value\""
                fi
            else
                log "VPN-CONFIG" "Warning: Could not find country \"$value\""
            fi
        fi
    done
    IFS="$oldIFS"
fi

# Process CITY if set
if [ -n "$city" ]; then
    # Convert semicolon/comma separated list to space separated
    oldIFS="$IFS"; IFS=',;'
    for value in $city; do
        if [ -n "$value" ]; then
            locations_count=$((locations_count + 1))
        fi
        if is_specific_server "$value"; then
            servers="$servers$(handle_specific_server "$value")"
        elif [ -n "$value" ]; then
            coords=$(getcitycoordinates "$value")
            if [ -n "$coords" ]; then
                latitude=$(echo "$coords" | cut -d',' -f1)
                longitude=$(echo "$coords" | cut -d',' -f2)
                
                # Build curl parameters
                curl_params="--data-urlencode coordinates[latitude]=$latitude --data-urlencode coordinates[longitude]=$longitude"
                if [ -n "$tech_filter" ]; then
                    curl_params="$curl_params $tech_filter"
                fi
                if [ -n "$group_filter" ]; then
                    curl_params="$curl_params $group_filter"
                fi
                
                # Execute curl with built parameters
                serversincity=$(eval "nord_api_curl \"v1/servers/recommendations\" $curl_params 2>/dev/null | jq -c '.[]' 2>/dev/null || echo \"\"")
                if [ -n "$serversincity" ]; then
                    log "VPN-CONFIG" "Request servers in \"$(getcityname "$value")\", $(echo "$serversincity" | jq -s 'length') servers received"
                    echo "$serversincity" | jq -r '[.name, .hostname, .load, .locations[0].country.name, .locations[0].country.city.name] | "\(.[1]): \(.[2])% load - \(.[3]), \(.[4]) (\(.[0]))"'
                    servers="$servers""$serversincity"
                else
                    log "VPN-CONFIG" "Warning: No servers returned for city \"$value\""
                fi
            else
                log "VPN-CONFIG" "Warning: Could not find coordinates for city \"$value\""
            fi
        fi
    done
    IFS="$oldIFS"
fi

poollength=0
if [ -n "$servers" ]; then
    poollength=$(echo "$servers" | jq -s 'unique | length' 2>/dev/null || echo "0")
else
    log "VPN-CONFIG" "No servers collected from any sources"
fi

# If no servers found, fallback to default recommended servers
if [ "$poollength" -eq 0 ]; then
    log "VPN-CONFIG" "No servers found for specified criteria, requesting default recommended servers"
    
    # Build curl parameters for fallback
    curl_params=""
    if [ -n "$tech_filter" ]; then
        curl_params="$tech_filter"
    fi
    if [ -n "$group_filter" ]; then
        curl_params="$curl_params $group_filter"
    fi
    
    servers=$(eval "nord_api_curl \"v1/servers/recommendations\" $curl_params 2>/dev/null | jq -c '.[]' 2>/dev/null || echo \"\"")
    
    if [ -n "$servers" ]; then
        log "VPN-CONFIG" "Default recommended servers: $(echo "$servers" | jq -s 'length') servers received"
        echo "$servers" | jq -r '[.name, .hostname, .load, .locations[0].country.name, .locations[0].country.city.name] | "\(.[1]): \(.[2])% load - \(.[3]), \(.[4]) (\(.[0]))"'
        poollength=$(echo "$servers" | jq -s 'unique | length')
    else
        log "VPN-CONFIG" "CRITICAL ERROR: Failed to get fallback servers - sleeping infinite"
        sleep infinity
    fi
fi

# Only sort by load if multiple locations are specified, otherwise keep recommended order
if [ \( -n "$country" \) -o \( -n "$city" \) ] && [ "$locations_count" -gt 1 ] && [ "$poollength" -gt 0 ]; then
    # Multiple locations - sort by load and remove duplicates
    servers=$(echo "$servers" | jq -s -c 'unique | sort_by(.load) | .[]')
else
    # Single location or no location specified - keep recommended order as is
    servers=$(echo "$servers" | jq -s -c '.[]')
fi

if [ "$random_top" -ne 0 ]; then
    if [ "$random_top" -lt "$poollength" ]; then
        filtered=$(echo "$servers" | head -n "$random_top" | shuf)
        servers="$filtered"$(echo "$servers" | tail -n +"$((random_top + 1))")
    else
        servers=$(echo "$servers" | shuf)
    fi
fi

log "VPN-CONFIG" "$poollength recommended servers in pool"
if [ "$poollength" -ne 0 ]; then
    log "VPN-CONFIG" "--- Top 20 servers in filtered pool ---"
    echo "$servers" | jq -r '[.name, .hostname, .load, .locations[0].country.name, .locations[0].country.city.name] | "\(.[1]): \(.[2])% load - \(.[3]), \(.[4]) (\(.[0]))"' | head -n 20
    log "VPN-CONFIG" "---------------------------------------"
fi

if [ "$poollength" -eq 0 ]; then
    log "VPN-CONFIG" "CRITICAL ERROR: list of selected servers is empty - sleeping infinite"
    sleep infinity
fi

serverip=$(echo "$servers" | jq -r '.station' | head -n 1)
name=$(echo "$servers" | jq -r '.name' | head -n 1)
hostname=$(echo "$servers" | jq -r '.hostname' | head -n 1)
protocol=$(getopenvpnprotocol "$technology")

# Extract location information
country_name=$(echo "$servers" | jq -r '.locations[0].country.name' | head -n 1)
city_name=$(echo "$servers" | jq -r '.locations[0].country.city.name' | head -n 1)
log "VPN-CONFIG" "Select server \"$name\" hostname=\"$hostname\" ip=\"$serverip\" protocol=\"$protocol\" location=\"$country_name, $city_name\""

cp "$ovpntemplatefile" "$ovpnfile"
chmod 0600 "$ovpnfile"
chown nordvpn:nordvpn "$ovpnfile"

sed -i "s/__IP__/$serverip/g" "$ovpnfile"
sed -i "s/__PROTOCOL__/$protocol/g" "$ovpnfile"
sed -i "s/__X509_NAME__/$hostname/g" "$ovpnfile"

if [ "$protocol" = "udp" ]; then
    sed -i "s/__PORT__/1194/g" "$ovpnfile"
elif [ "$protocol" = "tcp" ]; then
    sed -i "s/__PORT__/443/g" "$ovpnfile"
else
    log "VPN-CONFIG" "CRITICAL ERROR: TECHNOLOGY environment variable contains wrong parameter \"$technology\" - sleeping infinite"
    sleep infinity
fi

# Verify the config file was created successfully
if [ ! -s "$ovpnfile" ]; then
    log "VPN-CONFIG" "CRITICAL ERROR: VPN config file was not created successfully - sleeping infinite"
    sleep infinity
fi

log "VPN-CONFIG" "vpn-config script completed successfully"
exit 0