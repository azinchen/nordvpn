#!/command/with-contenv sh
# shellcheck shell=sh

set -eu

echo "[VPN-CONFIG] Starting vpn-config script..."

# Set default values for environment variables
COUNTRY="${COUNTRY:-}"
CITY="${CITY:-}"
TECHNOLOGY="${TECHNOLOGY:-OpenVPN UDP}"
GROUP="${GROUP:-}"
RANDOM_TOP="${RANDOM_TOP:-0}"

nvcountries=$(jq -c '.[]' < "/etc/nordvpn/countries.json")
nvgroups=$(jq -c '.[]' < "/etc/nordvpn/groups.json")
nvtechnologies=$(jq -c '.[]' < "/etc/nordvpn/technologies.json")

numericregex="^[0-9]+$"
specific_server_regex="^[a-zA-Z]{2}[0-9]+$"

ovpntemplatefile="/etc/nordvpn/template.ovpn"
ovpnfile="/tmp/nordvpn.ovpn"

# Helper functions for pattern matching (sh-compatible)
is_numeric()
{
    case "$1" in
        ''|*[!0-9]*) return 1 ;;
        *) return 0 ;;
    esac
}

is_specific_server()
{
    case "$1" in
        [a-zA-Z][a-zA-Z][0-9]*)
            # Check if it's exactly 2 letters followed by numbers
            prefix=$(echo "$1" | cut -c1-2)
            suffix=$(echo "$1" | cut -c3-)
            case "$prefix" in
                [a-zA-Z][a-zA-Z]) ;;
                *) return 1 ;;
            esac
            case "$suffix" in
                ''|*[!0-9]*) return 1 ;;
                *) return 0 ;;
            esac
            ;;
        *) return 1 ;;
    esac
}

contains_substring()
{
    case "$1" in
        *"$2"*) return 0 ;;
        *) return 1 ;;
    esac
}

getcountryid()
{
    input=$1

    if is_numeric "$input"; then
        id=$(echo "$nvcountries" | jq -r --argjson ID "$input" 'select(.id == $ID) | .id')
    else
        id=$(echo "$nvcountries" | jq -r --arg NAME "$input" 'select(.name == $NAME) | .id')
        if [ -z "$id" ]; then
            id=$(echo "$nvcountries" | jq -r --arg CODE "$input" 'select(.code == $CODE) | .id')
        fi
    fi

    printf '%s' "$id"

    if [ -z "$id" ]; then
        return 1
    fi

    return 0
}

getcountryname()
{
    input=$1

    if is_numeric "$input"; then
        name=$(echo "$nvcountries" | jq -r --argjson ID "$input" 'select(.id == $ID) | .name')
    else
        name=$(echo "$nvcountries" | jq -r --arg NAME "$input" 'select(.name == $NAME) | .name')
        if [ -z "$name" ]; then
            name=$(echo "$nvcountries" | jq -r --arg CODE "$input" 'select(.code == $CODE) | .name')
        fi
    fi

    printf '%s' "$name"

    if [ -z "$name" ]; then
        return 1
    fi

    return 0
}

getcityid()
{
    input=$1

    if is_numeric "$input"; then
        id=$(echo "$nvcountries" | jq -r --argjson ID "$input" 'select(.cities[]? | .id == $ID) | .cities[] | select(.id == $ID) | .id' | head -n 1)
    else
        id=$(echo "$nvcountries" | jq -r --arg NAME "$input" 'select(.cities[]? | .name == $NAME) | .cities[] | select(.name == $NAME) | .id' | head -n 1)
        if [ -z "$id" ]; then
            id=$(echo "$nvcountries" | jq -r --arg DNS_NAME "$input" 'select(.cities[]? | .dns_name == $DNS_NAME) | .cities[] | select(.dns_name == $DNS_NAME) | .id' | head -n 1)
        fi
    fi

    printf '%s' "$id"

    if [ -z "$id" ]; then
        return 1
    fi

    return 0
}

getcityname()
{
    input=$1

    if is_numeric "$input"; then
        name=$(echo "$nvcountries" | jq -r --argjson ID "$input" 'select(.cities[]? | .id == $ID) | .cities[] | select(.id == $ID) | .name' | head -n 1)
    else
        name=$(echo "$nvcountries" | jq -r --arg NAME "$input" 'select(.cities[]? | .name == $NAME) | .cities[] | select(.name == $NAME) | .name' | head -n 1)
        if [ -z "$name" ]; then
            name=$(echo "$nvcountries" | jq -r --arg DNS_NAME "$input" 'select(.cities[]? | .dns_name == $DNS_NAME) | .cities[] | select(.dns_name == $DNS_NAME) | .name' | head -n 1)
        fi
    fi

    printf '%s' "$name"

    if [ -z "$name" ]; then
        return 1
    fi

    return 0
}

getcitycoordinates()
{
    input=$1

    # First get the city ID using existing function
    cityid=$(getcityid "$input")
    if [ -z "$cityid" ]; then
        return 1
    fi

    # Then get coordinates using the city ID
    coords=$(echo "$nvcountries" | jq -r --argjson ID "$cityid" 'select(.cities[]? | .id == $ID) | .cities[] | select(.id == $ID) | "\(.latitude),\(.longitude)"' | head -n 1)

    printf '%s' "$coords"

    if [ -z "$coords" ] || [ "$coords" = "null,null" ]; then
        return 1
    fi

    return 0
}

getgroupid()
{
    input=$1

    # Check for empty input
    if [ -z "$input" ]; then
        return 1
    fi

    if is_numeric "$input"; then
        id=$(echo "$nvgroups" | jq -r --argjson ID "$input" 'select(.id == $ID) | .id')
    else
        id=$(echo "$nvgroups" | jq -r --arg TITLE "$input" 'select(.title == $TITLE) | .id')
        if [ -z "$id" ]; then
            id=$(echo "$nvgroups" | jq -r --arg IDENTIFIER "$input" 'select(.identifier == $IDENTIFIER) | .id')
        fi
    fi

    printf '%s' "$id"

    if [ -z "$id" ]; then
        return 1
    fi

    return 0
}

getgrouptitle()
{
    input=$1

    if is_numeric "$input"; then
        title=$(echo "$nvgroups" | jq -r --argjson ID "$input" 'select(.id == $ID) | .title')
    else
        title=$(echo "$nvgroups" | jq -r --arg TITLE "$input" 'select(.title == $TITLE) | .title')
        if [ -z "$title" ]; then
            title=$(echo "$nvgroups" | jq -r --arg IDENTIFIER "$input" 'select(.identifier == $IDENTIFIER) | .title')
        fi
    fi

    printf '%s' "$title"

    if [ -z "$title" ]; then
        return 1
    fi

    return 0
}

gettechnologyid()
{
    input=$1

    # Check for empty input
    if [ -z "$input" ]; then
        return 1
    fi

    if is_numeric "$input"; then
        id=$(echo "$nvtechnologies" | jq -r --argjson ID "$input" 'select(.id == $ID) | .id')
    else
        id=$(echo "$nvtechnologies" | jq -r --arg NAME "$input" 'select(.name == $NAME) | .id')
        if [ -z "$id" ]; then
            id=$(echo "$nvtechnologies" | jq -r --arg IDENTIFIER "$input" 'select(.identifier == $IDENTIFIER) | .id')
        fi
    fi

    printf '%s' "$id"

    if [ -z "$id" ]; then
        return 1
    fi

    return 0
}

gettechnologyname()
{
    input=$1

    if is_numeric "$input"; then
        name=$(echo "$nvtechnologies" | jq -r --argjson ID "$input" 'select(.id == $ID) | .name')
    else
        name=$(echo "$nvtechnologies" | jq -r --arg NAME "$input" 'select(.name == $NAME) | .name')
        if [ -z "$name" ]; then
            name=$(echo "$nvtechnologies" | jq -r --arg IDENTIFIER "$input" 'select(.identifier == $IDENTIFIER) | .name')
        fi
    fi

    printf '%s' "$name"

    if [ -z "$name" ]; then
        return 1
    fi

    return 0
}

getopenvpnprotocol()
{
    input=$1

    ident=$(echo "$nvtechnologies" | jq -r --arg NAME "$input" 'select(.name == $NAME) | .identifier')
    if [ -z "$ident" ]; then
        if is_numeric "$input"; then
            ident=$(echo "$nvtechnologies" | jq -r --argjson ID "$input" 'select(.id == $ID) | .identifier')
        fi
    fi
    if [ -z "$ident" ]; then
        ident=$input
    fi

    if ! contains_substring "$ident" "openvpn"; then
        printf ""
        return 1
    elif contains_substring "$ident" "udp"; then
        printf "udp"
        return 0
    elif contains_substring "$ident" "tcp"; then
        printf "tcp"
        return 0
    else
        printf ""
        return 1
    fi
}

handle_specific_server()
{
    value=$1
    
    # Convert to lowercase using tr instead of ${value,,}
    hostname="$(echo "$value" | tr '[:upper:]' '[:lower:]').nordvpn.com"
    ip="$(host -t A "$hostname" | awk '{print $4}')"
    # Extract country code (first 2 chars) and number part
    country_code=$(echo "$value" | cut -c1-2)
    country_num=$(echo "$value" | cut -c3-)
    name="$(getcountryname "$country_code") #$country_num"
    constructed_json=$(printf '{"name":"%s","hostname":"%s","load":0,"station":"%s"}' "$name" "$hostname" "$ip")
    
    printf '%s' "$constructed_json"
}

servers=""
locations_count=0

# Validate technology and group IDs and build filter strings
tech_filter=""
if [ -n "$TECHNOLOGY" ]; then
    tech_id=$(gettechnologyid "$TECHNOLOGY")
    if [ -z "$tech_id" ]; then
        echo "[VPN-CONFIG] Warning: Could not find technology \"$TECHNOLOGY\""
    else
        tech_filter="--data-urlencode filters[servers_technologies][id]=$tech_id"
    fi
else
    echo "[VPN-CONFIG] No technology filter specified"
fi

group_filter=""
if [ -n "$GROUP" ] && [ "$GROUP" != "" ]; then
    group_id=$(getgroupid "$GROUP")
    if [ -z "$group_id" ]; then
        echo "[VPN-CONFIG] Warning: Could not find group \"$GROUP\""
    else
        group_filter="--data-urlencode filters[servers_groups][id]=$group_id"
    fi
else
    echo "[VPN-CONFIG] No group filter specified (GROUP='${GROUP:-}')"
fi

test_response=$(curl -sG --connect-timeout 5 --max-time 10 "https://api.nordvpn.com/v1/servers/recommendations" --data-urlencode "limit=1" 2>/dev/null || echo "")
if [ -z "$test_response" ]; then
    echo "[VPN-CONFIG] WARNING: API connectivity test failed - no response from NordVPN API"
fi
servers=""
locations_count=0

# Process COUNTRY if set
if [ -n "$COUNTRY" ]; then
    # Convert semicolon/comma separated list to space separated  
    countries=$(echo "$COUNTRY" | tr ';,' ' ')
    for value in $countries; do
        if [ -n "$value" ]; then
            locations_count=$((locations_count + 1))
        fi
        if is_specific_server "$value"; then
            servers="$servers$(handle_specific_server "$value")"
        elif [ -n "$value" ]; then
            countryid=$(getcountryid "$value")
            if [ -n "$countryid" ]; then
                # Build curl parameters
                curl_params="--data-urlencode filters[country_id]=$countryid"
                if [ -n "$tech_filter" ]; then
                    curl_params="$curl_params --data-urlencode filters[servers_technologies][id]=$tech_id"
                fi
                if [ -n "$group_filter" ]; then
                    curl_params="$curl_params --data-urlencode filters[servers_groups][id]=$group_id"
                fi
                
                # Execute curl with built parameters
                serversincountry=$(eval "curl -sG --connect-timeout 10 --max-time 30 \"https://api.nordvpn.com/v1/servers/recommendations\" $curl_params 2>/dev/null | jq -c '.[]' 2>/dev/null || echo \"\"")
                if [ -n "$serversincountry" ]; then
                    echo "[VPN-CONFIG] Request servers in \"$(getcountryname "$value")\", $(echo "$serversincountry" | jq -s 'length') servers received"
                    echo "$serversincountry" | jq -r '[.name, .hostname, .load, .locations[0].country.name, .locations[0].country.city.name] | "\(.[1]): \(.[2])% load - \(.[3]), \(.[4]) (\(.[0]))"' | head -n 20
                    servers="$servers""$serversincountry"
                else
                    echo "[VPN-CONFIG] Warning: No servers returned for country \"$value\""
                fi
            else
                echo "[VPN-CONFIG] Warning: Could not find country \"$value\""
            fi
        fi
    done
fi

# Process CITY if set
if [ -n "$CITY" ]; then
    # Convert semicolon/comma separated list to space separated  
    cities=$(echo "$CITY" | tr ';,' ' ')
    for value in $cities; do
        if [ -n "$value" ]; then
            locations_count=$((locations_count + 1))
        fi
        if is_specific_server "$value"; then
            servers="$servers$(handle_specific_server "$value")"
        elif [ -n "$value" ]; then
            coords=$(getcitycoordinates "$value")
            if [ -n "$coords" ]; then
                latitude=$(echo "$coords" | cut -d',' -f1)
                longitude=$(echo "$coords" | cut -d',' -f2)
                
                # Build curl parameters
                curl_params="--data-urlencode coordinates[latitude]=$latitude --data-urlencode coordinates[longitude]=$longitude"
                if [ -n "$tech_filter" ]; then
                    curl_params="$curl_params --data-urlencode filters[servers_technologies][id]=$tech_id"
                fi
                if [ -n "$group_filter" ]; then
                    curl_params="$curl_params --data-urlencode filters[servers_groups][id]=$group_id"
                fi
                
                # Execute curl with built parameters
                serversincity=$(eval "curl -sG --connect-timeout 10 --max-time 30 \"https://api.nordvpn.com/v1/servers/recommendations\" $curl_params 2>/dev/null | jq -c '.[]' 2>/dev/null || echo \"\"")
                if [ -n "$serversincity" ]; then
                    echo "[VPN-CONFIG] Request servers in \"$(getcityname "$value")\", $(echo "$serversincity" | jq -s 'length') servers received"
                    echo "$serversincity" | jq -r '[.name, .hostname, .load, .locations[0].country.name, .locations[0].country.city.name] | "\(.[1]): \(.[2])% load - \(.[3]), \(.[4]) (\(.[0]))"' | head -n 20
                    servers="$servers""$serversincity"
                else
                    echo "[VPN-CONFIG] Warning: No servers returned for city \"$value\""
                fi
            else
                echo "[VPN-CONFIG] Warning: Could not find coordinates for city \"$value\""
            fi
        fi
    done
fi

poollength=0
if [ -n "$servers" ]; then
    poollength=$(echo "$servers" | jq -s 'unique | length' 2>/dev/null || echo "0")
else
    echo "[VPN-CONFIG] No servers collected from any sources"
fi

# If no servers found, fallback to default recommended servers
if [ "$poollength" -eq 0 ]; then
    echo "[VPN-CONFIG] No servers found for specified criteria, requesting default recommended servers"
    
    # Build curl parameters for fallback
    curl_params=""
    if [ -n "$tech_filter" ]; then
        curl_params="--data-urlencode filters[servers_technologies][id]=$tech_id"
    fi
    if [ -n "$group_filter" ]; then
        curl_params="$curl_params --data-urlencode filters[servers_groups][id]=$group_id"
    fi
    
    servers=$(eval "curl -sG --connect-timeout 10 --max-time 30 \"https://api.nordvpn.com/v1/servers/recommendations\" $curl_params 2>/dev/null | jq -c '.[]' 2>/dev/null || echo \"\"")
    
    if [ -n "$servers" ]; then
        echo "[VPN-CONFIG] Default recommended servers: $(echo "$servers" | jq -s 'length') servers received"
        echo "$servers" | jq -r '[.name, .hostname, .load, .locations[0].country.name, .locations[0].country.city.name] | "\(.[1]): \(.[2])% load - \(.[3]), \(.[4]) (\(.[0]))"' | head -n 20
        poollength=$(echo "$servers" | jq -s 'unique | length')
    else
        echo "[VPN-CONFIG] ERROR: Failed to get fallback servers"
        exit 1
    fi
fi

# Only sort by load if multiple locations are specified, otherwise keep recommended order
if [ \( -n "$COUNTRY" \) -o \( -n "$CITY" \) ] && [ "$locations_count" -gt 1 ] && [ "$poollength" -gt 0 ]; then
    # Multiple locations - sort by load and remove duplicates
    servers=$(echo "$servers" | jq -s -c 'unique | sort_by(.load) | .[]')
else
    # Single location or no location specified - keep recommended order as is
    servers=$(echo "$servers" | jq -s -c '.[]')
fi

if [ "$RANDOM_TOP" -ne 0 ]; then
    if [ "$RANDOM_TOP" -lt "$poollength" ]; then
        filtered=$(echo "$servers" | head -n "$RANDOM_TOP" | shuf)
        servers="$filtered"$(echo "$servers" | tail -n +"$((RANDOM_TOP + 1))")
    else
        servers=$(echo "$servers" | shuf)
    fi
fi

echo "[VPN-CONFIG] $poollength recommended servers in pool"
if [ "$poollength" -ne 0 ]; then
    echo "[VPN-CONFIG] --- Top 20 servers in filtered pool ---"
    echo "$servers" | jq -r '[.name, .hostname, .load, .locations[0].country.name, .locations[0].country.city.name] | "\(.[1]): \(.[2])% load - \(.[3]), \(.[4]) (\(.[0]))"' | head -n 20
    echo "[VPN-CONFIG] ---------------------------------------"
fi

if [ "$poollength" -eq 0 ]; then
    echo "[VPN-CONFIG] ERROR: list of selected servers is empty"
fi

serverip=$(echo "$servers" | jq -r '.station' | head -n 1)
name=$(echo "$servers" | jq -r '.name' | head -n 1)
hostname=$(echo "$servers" | jq -r '.hostname' | head -n 1)
protocol=$(getopenvpnprotocol "$TECHNOLOGY")

# Extract location information
country_name=$(echo "$servers" | jq -r '.locations[0].country.name' | head -n 1)
city_name=$(echo "$servers" | jq -r '.locations[0].country.city.name' | head -n 1)
echo "[VPN-CONFIG] Server location: $country_name, $city_name"

echo "[VPN-CONFIG] Select server \"$name\" hostname=\"$hostname\" ip=\"$serverip\" protocol=\"$protocol\" location=\"$country_name, $city_name\""

cp "$ovpntemplatefile" "$ovpnfile"
chmod 0600 "$ovpnfile"
chown nordvpn:nordvpn "$ovpnfile"

sed -i "s/__IP__/$serverip/g" "$ovpnfile"
sed -i "s/__PROTOCOL__/$protocol/g" "$ovpnfile"
sed -i "s/__X509_NAME__/$hostname/g" "$ovpnfile"

if [ "$protocol" = "udp" ]; then
    sed -i "s/__PORT__/1194/g" "$ovpnfile"
elif [ "$protocol" = "tcp" ]; then
    sed -i "s/__PORT__/443/g" "$ovpnfile"
else
    echo "[VPN-CONFIG] ERROR: TECHNOLOGY environment variable contains wrong parameter \"$TECHNOLOGY\""
    exit 1
fi

echo "[VPN-CONFIG] VPN configuration file created successfully at $ovpnfile"
echo "[VPN-CONFIG] vpn-config script completed successfully"
exit 0
